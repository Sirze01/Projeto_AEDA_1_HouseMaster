@startuml
!define LIGHTORANGE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     --
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    --
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    --
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    --
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void usernameMapChanger(std::string id, std::string newUsername)
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    --
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    --
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + void changeUsername(HouseMaster &hm, std::string newUsername)
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    --
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(const std::string &service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    --
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|-- Collaborator
 Individual <|-- Client
 Date <|-- Duration
 Service<|-- Painting
 HouseMaster o-- Client
 HouseMaster o-- Collaborator
 HouseMaster *-- Intervention
 Collaborator *-- classification
 Intervention *-- Service
 Intervention *-- processState
 Intervention o-- Date
 Intervention *-- Duration
@enduml
