@startuml
!define LIGHTORANGE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

 enum processState{
     WaitingPayment
     Scheduled
     InProgress
     Concluded
 }


 enum classification{
     Unreliable
     Clumsy
     GetsItDone
     HardWorker
     Attentive
     Savior
 }


 entity Service{
     bool pro
     string name
     float price
 }

 entity date{
     unsigned int day
     unsigned int month
     unsigned int year
     unsigned int hours
     unsigned int minutes
 }

class HouseMaster{
    - std::unordered_set<servicesType*> availableServices
    - std::unordered_map<std::string, Individual*> usernames
    - std::map<std::string, Collaborator*> collaborators
    - std::unordered_map<std::string, Client*> clients
    - std::unordered_set<intervention*> interventions
    ----
    + void houseMaster()
    
    + int getAvailableServices()
    - int addAvailableServices(service toAdd)
    - int removeAvailableServices(service toRemove)
    
    + int getCollaborators()
    - int addCollaborator(string name, vector<servicesType*> functions, Availability)
    - int removeCollaborator(unsigned int id)
    
    + int getClients()
    - int addClient(string name)
    - int removeClient(unsigned int id)

    + int getInterventions()
    + int addIntervention(servicesType type, date appointment)
    + int removeIntervention(unsigned int id)
    
    + int assignCollaborator(intervention toAssignTo)
    + int calculateCost(intervention toCalculateFrom)
}


class Intervention{
    - unsigned int id
    - date appointment
    - servicesType type
    - bool forcePro
    - collaborator assigned
    - processState state
    - float price
    ----
    + void intervention(date appointment, servicesType type, bool forcePro)
    + int getService()
    + int getProcessState()
    + int getCost()
}


class Individual{
    # string name
    # unsigned int id
    # vector<interventions*> associatedInterventions
    ----
    + individual(string name)
    + unsigned int getId()
    + string getName()
    + bool operator== (const individual& right)
}

class Collaborator{
    - vector<servicesType*> functions
    - classification score
    - Availability
    ----
    + void collaborator(vector<servicesType*> functions)
    + int getFunctions()
    + int getScore()
    + int getAvailability()
}

class Client{
    - unsigned int nif
    ----
    + void client(string nif)
    + unsigned int getNif()
    + int requestIntervention(date appointment, servicesType type, bool forcePro)
}
Individual <|-- Collaborator
Individual <|-- Client
HouseMaster o-- Client
HouseMaster *-- Collaborator
HouseMaster *-- Intervention
Collaborator *-- classification
Intervention *-- Service
Intervention *-- processState
Intervention *-- date

@enduml
