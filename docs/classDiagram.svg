<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1237.6px" preserveAspectRatio="none" style="width:2295px;height:1237px;" version="1.1" viewBox="0 0 2295 1237" width="2295.2px" zoomAndPan="magnify"><defs><filter height="300%" id="fxh9x862fl4tt" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="1.6"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="3.2" dy="3.2" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[d694de1a4d3eb4abf36fc4a4dacd5966]
class processState--><rect codeLine="4" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="64.3313" id="processState" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="79.2" x="404.8" y="983.6"/><ellipse cx="414.4" cy="994" fill="#EB937F" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M412.0125,990.8 L416.475,990.8 L416.475,992.0125 L413.6625,992.0125 L413.6625,993.2 L416.3,993.2 L416.3,994.425 L413.6625,994.425 L413.6625,995.9875 L416.5625,995.9875 L416.5625,997.2 L412.0125,997.2 L412.0125,990.8 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="58.4" x="423.2" y="997.0465">processState</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="405.6" x2="483.2" y1="1004.4" y2="1004.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="31.2" x="409.6" y="1015.7684">Active,</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="46.4" x="409.6" y="1026.0121">Complete,</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="41.6" x="409.6" y="1036.2559">Canceled</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="405.6" x2="483.2" y1="1041.5313" y2="1041.5313"/><!--MD5=[090baa0da4ff03e6b68a244d81271cc4]
class classification--><rect codeLine="11" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="105.3063" id="classification" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="86.4" x="1878.8" y="962.8"/><ellipse cx="1892" cy="973.2" fill="#EB937F" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1889.6125,970 L1894.075,970 L1894.075,971.2125 L1891.2625,971.2125 L1891.2625,972.4 L1893.9,972.4 L1893.9,973.625 L1891.2625,973.625 L1891.2625,975.1875 L1894.1625,975.1875 L1894.1625,976.4 L1889.6125,976.4 L1889.6125,970 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="57.6" x="1901.6" y="976.2465">classification</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1879.6" x2="1964.4" y1="983.6" y2="983.6"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="1883.6" y="994.9684">unreliable = -2</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="54.4" x="1883.6" y="1005.2121">clumsy = -1</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="59.2" x="1883.6" y="1015.4559">newHere = 0</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="1883.6" y="1025.6996">getsItDone = 1</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="76.8" x="1883.6" y="1035.9434">hardWorking = 2</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="59.2" x="1883.6" y="1046.1871">attentive = 3</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="47.2" x="1883.6" y="1056.4309">savior = 4</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1879.6" x2="1964.4" y1="1061.7063" y2="1061.7063"/><!--MD5=[7829b64950ce38e0487c4015ea331f97]
class Date--><rect codeLine="21" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="197.5" id="Date" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="494.4" x="511.6" y="916.8"/><ellipse cx="745.6" cy="927.2" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M747.9,929.9375 Q747.4375,930.1625 746.9375,930.2875 Q746.45,930.4 745.9125,930.4 Q744.3125,930.4 743.375,929.5375 Q742.4375,928.675 742.4375,927.2 Q742.4375,925.7125 743.375,924.8625 Q744.3125,924 745.9125,924 Q746.45,924 746.9375,924.125 Q747.4375,924.2375 747.9,924.4625 L747.9,925.7375 Q747.4375,925.45 746.9875,925.3125 Q746.5375,925.1625 746.05,925.1625 Q745.1625,925.1625 744.65,925.7125 Q744.15,926.25 744.15,927.2 Q744.15,928.15 744.65,928.6875 Q745.1625,929.225 746.05,929.225 Q746.5375,929.225 746.9875,929.0875 Q747.4375,928.9375 747.9,928.65 L747.9,929.9375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="20.8" x="758.4" y="930.2465">Date</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="512.4" x2="1005.2" y1="937.6" y2="937.6"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="518" y="944"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="94.4" x="525.2" y="948.9684">unsigned int _day{};</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="518" y="954.2438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="106.4" x="525.2" y="959.2121">unsigned int _month{};</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="518" y="964.4875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="98.4" x="525.2" y="969.4559">unsigned int _year{};</text><polygon fill="none" points="520.4,973.1313,523.6,976.3313,520.4,979.5313,517.2,976.3313" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88.8" x="525.2" y="979.6996">unsigned int _hours</text><polygon fill="none" points="520.4,983.375,523.6,986.575,520.4,989.775,517.2,986.575" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="99.2" x="525.2" y="989.9434">unsigned int _minutes</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="512.4" x2="1005.2" y1="995.2188" y2="995.2188"/><ellipse cx="520.4" cy="1004.0188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="30.4" x="525.2" y="1006.5871">Date();</text><ellipse cx="520.4" cy="1014.2625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="476" x="525.2" y="1016.8309">Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);</text><ellipse cx="520.4" cy="1024.5063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="168.8" x="525.2" y="1027.0746">explicit Date(const std::string &amp;date);</text><ellipse cx="520.4" cy="1034.75" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="126.4" x="525.2" y="1037.3184">std::string getString() const;</text><ellipse cx="520.4" cy="1044.9938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="176.8" x="525.2" y="1047.5621">Date operator+(const Date &amp;d1) const;</text><ellipse cx="520.4" cy="1055.2375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="182.4" x="525.2" y="1057.8059">bool operator==(const Date &amp;d2) const;</text><ellipse cx="520.4" cy="1065.4813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="175.2" x="525.2" y="1068.0496">bool operator&lt;(const Date &amp;d2) const;</text><ellipse cx="520.4" cy="1075.725" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="175.2" x="525.2" y="1078.2934">bool operator&gt;(const Date &amp;d2) const;</text><ellipse cx="520.4" cy="1085.9688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112.8" x="525.2" y="1088.5371">void checkIfValid() const;</text><rect fill="#F24D5C" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="518" y="1093.8125"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="108.8" x="525.2" y="1098.7809">bool isLeapYear() const;</text><ellipse cx="520.4" cy="1106.4563" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="79.2" x="525.2" y="1109.0246">class InvalidDate;</text><!--MD5=[e7713a66b67445a0eb297b7e73c442e5]
class Duration--><rect codeLine="41" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="95.0625" id="Duration" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="251.2" x="1034" y="968"/><ellipse cx="1137.6" cy="978.4" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1139.9,981.1375 Q1139.4375,981.3625 1138.9375,981.4875 Q1138.45,981.6 1137.9125,981.6 Q1136.3125,981.6 1135.375,980.7375 Q1134.4375,979.875 1134.4375,978.4 Q1134.4375,976.9125 1135.375,976.0625 Q1136.3125,975.2 1137.9125,975.2 Q1138.45,975.2 1138.9375,975.325 Q1139.4375,975.4375 1139.9,975.6625 L1139.9,976.9375 Q1139.4375,976.65 1138.9875,976.5125 Q1138.5375,976.3625 1138.05,976.3625 Q1137.1625,976.3625 1136.65,976.9125 Q1136.15,977.45 1136.15,978.4 Q1136.15,979.35 1136.65,979.8875 Q1137.1625,980.425 1138.05,980.425 Q1138.5375,980.425 1138.9875,980.2875 Q1139.4375,980.1375 1139.9,979.85 L1139.9,981.1375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="38.4" x="1150.4" y="981.4465">Duration</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1034.8" x2="1284.4" y1="988.8" y2="988.8"/><ellipse cx="1042.8" cy="997.6" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="96.8" x="1047.6" y="1000.1684">class InvalidDuration;</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1034.8" x2="1284.4" y1="1005.4438" y2="1005.4438"/><ellipse cx="1042.8" cy="1014.2438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="48" x="1047.6" y="1016.8121">Duration();</text><ellipse cx="1042.8" cy="1024.4875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="232.8" x="1047.6" y="1027.0559">Duration(unsigned int hours, unsigned int minutes);</text><ellipse cx="1042.8" cy="1034.7313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="204" x="1047.6" y="1037.2996">explicit Duration(const std::string &amp;duration);</text><ellipse cx="1042.8" cy="1044.975" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="168" x="1047.6" y="1047.5434">std::string getString() const override;</text><ellipse cx="1042.8" cy="1055.2188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154.4" x="1047.6" y="1057.7871">void checkIfValid() const override;</text><!--MD5=[dbb8b4f13c7b21394f9d757e58732f45]
class Service--><rect codeLine="50" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="146.2813" id="Service" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="369.6" x="6.8" y="942.4"/><ellipse cx="172" cy="952.8" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M174.3,955.5375 Q173.8375,955.7625 173.3375,955.8875 Q172.85,956 172.3125,956 Q170.7125,956 169.775,955.1375 Q168.8375,954.275 168.8375,952.8 Q168.8375,951.3125 169.775,950.4625 Q170.7125,949.6 172.3125,949.6 Q172.85,949.6 173.3375,949.725 Q173.8375,949.8375 174.3,950.0625 L174.3,951.3375 Q173.8375,951.05 173.3875,950.9125 Q172.9375,950.7625 172.45,950.7625 Q171.5625,950.7625 171.05,951.3125 Q170.55,951.85 170.55,952.8 Q170.55,953.75 171.05,954.2875 Q171.5625,954.825 172.45,954.825 Q172.9375,954.825 173.3875,954.6875 Q173.8375,954.5375 174.3,954.25 L174.3,955.5375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="33.6" x="184.8" y="955.8465">Service</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="7.6" x2="375.6" y1="963.2" y2="963.2"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.2" y="969.6"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="79.2" x="20.4" y="974.5684">std::string _name</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.2" y="979.8438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="42.4" x="20.4" y="984.8121">bool _pro</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.2" y="990.0875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="72" x="20.4" y="995.0559">float _basePrice</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.2" y="1000.3313"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="83.2" x="20.4" y="1005.2996">duration _duration</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="7.6" x2="375.6" y1="1010.575" y2="1010.575"/><ellipse cx="15.6" cy="1019.375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="40" x="20.4" y="1021.9434">Service()</text><ellipse cx="15.6" cy="1029.6188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="351.2" x="20.4" y="1032.1871">Service(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="15.6" cy="1039.8625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="123.2" x="20.4" y="1042.4309">std::string getName() const</text><ellipse cx="15.6" cy="1050.1063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="20.4" y="1052.6746">bool getPro() const</text><ellipse cx="15.6" cy="1060.35" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="116" x="20.4" y="1062.9184">float getBasePrice() const</text><ellipse cx="15.6" cy="1070.5938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="127.2" x="20.4" y="1073.1621">duration getDuration() const</text><ellipse cx="15.6" cy="1080.8375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="66.4" x="20.4" y="1083.4059">float getPrice()</text><!--MD5=[ccb6b53f2b3136c820d7801ae6f29901]
class Painting--><rect codeLine="65" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="64.3313" id="Painting" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="372" x="5.6" y="1162.4"/><ellipse cx="170.8" cy="1172.8" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M173.1,1175.5375 Q172.6375,1175.7625 172.1375,1175.8875 Q171.65,1176 171.1125,1176 Q169.5125,1176 168.575,1175.1375 Q167.6375,1174.275 167.6375,1172.8 Q167.6375,1171.3125 168.575,1170.4625 Q169.5125,1169.6 171.1125,1169.6 Q171.65,1169.6 172.1375,1169.725 Q172.6375,1169.8375 173.1,1170.0625 L173.1,1171.3375 Q172.6375,1171.05 172.1875,1170.9125 Q171.7375,1170.7625 171.25,1170.7625 Q170.3625,1170.7625 169.85,1171.3125 Q169.35,1171.85 169.35,1172.8 Q169.35,1173.75 169.85,1174.2875 Q170.3625,1174.825 171.25,1174.825 Q171.7375,1174.825 172.1875,1174.6875 Q172.6375,1174.5375 173.1,1174.25 L173.1,1175.5375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="36" x="183.6" y="1175.8465">Painting</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="6.4" x2="376.8" y1="1183.2" y2="1183.2"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="12" y="1189.6"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="123.2" x="19.2" y="1194.5684">unsigned int _roomNumber</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="6.4" x2="376.8" y1="1199.8438" y2="1199.8438"/><ellipse cx="14.4" cy="1208.6438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="353.6" x="19.2" y="1211.2121">Painting(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="14.4" cy="1218.8875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="108" x="19.2" y="1221.4559">float getPrice() override</text><!--MD5=[34fc254bc528b6b0fa50d673940a681f]
class HouseMaster--><rect codeLine="72" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="525.3" id="HouseMaster" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="698.4" x="950.4" y="5.6"/><ellipse cx="1267.6" cy="16" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1269.9,18.7375 Q1269.4375,18.9625 1268.9375,19.0875 Q1268.45,19.2 1267.9125,19.2 Q1266.3125,19.2 1265.375,18.3375 Q1264.4375,17.475 1264.4375,16 Q1264.4375,14.5125 1265.375,13.6625 Q1266.3125,12.8 1267.9125,12.8 Q1268.45,12.8 1268.9375,12.925 Q1269.4375,13.0375 1269.9,13.2625 L1269.9,14.5375 Q1269.4375,14.25 1268.9875,14.1125 Q1268.5375,13.9625 1268.05,13.9625 Q1267.1625,13.9625 1266.65,14.5125 Q1266.15,15.05 1266.15,16 Q1266.15,16.95 1266.65,17.4875 Q1267.1625,18.025 1268.05,18.025 Q1268.5375,18.025 1268.9875,17.8875 Q1269.4375,17.7375 1269.9,17.45 L1269.9,18.7375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="58.4" x="1280.4" y="19.0465">HouseMaster</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="951.2" x2="1648" y1="26.4" y2="26.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="287.2" x="955.2" y="37.7684">std::unordered_map&lt;std::string, Service *&gt; _availableServices</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="176.8" x="955.2" y="48.0121">std::map&lt;std::string, Client *&gt; _clients</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="276" x="955.2" y="58.2559">std::unordered_map&lt;std::string, std::string&gt; _usernameMap</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="237.6" x="955.2" y="68.4996">std::map&lt;std::string, Collaborator *&gt; _collaborators</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="229.6" x="955.2" y="78.7434">std::unordered_set&lt;Intervention *&gt; _interventions</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="955.2" y="88.9871">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="951.2" x2="1648" y1="94.2625" y2="94.2625"/><ellipse cx="959.2" cy="103.0625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="64.8" x="964" y="105.6309">HouseMaster()</text><ellipse cx="959.2" cy="113.3063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="590.4" x="964" y="115.8746">HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)</text><ellipse cx="959.2" cy="123.55" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="116.8" x="964" y="126.1184">~HouseMaster() = default</text><ellipse cx="959.2" cy="133.7938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="262.4" x="964" y="136.3621">std::map&lt;std::string, Collaborator *&gt; &amp;getCollaborators()</text><ellipse cx="959.2" cy="144.0375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="201.6" x="964" y="146.6059">std::map&lt;std::string, Client *&gt; &amp;getClients()</text><ellipse cx="959.2" cy="154.2813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="256" x="964" y="156.8496">std::unordered_set&lt;Intervention *&gt; &amp; getInterventions()</text><ellipse cx="959.2" cy="164.525" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="467.2" x="964" y="167.0934">void addAvailableService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><ellipse cx="959.2" cy="174.7688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="255.2" x="964" y="177.3371">void removeAvailableService(const std::string &amp;service)</text><ellipse cx="959.2" cy="185.0125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="311.2" x="964" y="187.5809">std::unordered_map&lt;std::string, Service *&gt; &amp;getAvailableServices()</text><ellipse cx="959.2" cy="195.2563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="308" x="964" y="197.8246">void usernameMapChanger(std::string id, std::string newUsername)</text><ellipse cx="959.2" cy="205.5" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="226.4" x="964" y="208.0684">void removeCollaborator(const std::string &amp;collId)</text><ellipse cx="959.2" cy="215.7438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="680" x="964" y="218.3121">void addCollaborator(const std::vector&lt;std::string&gt; &amp;services, const std::string &amp;name, bool pro, float earnings = 0, Classification score = newHere)</text><ellipse cx="959.2" cy="225.9875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="333.6" x="964" y="228.5559">void addClient(unsigned long nif, const std::string &amp;name, bool premium)</text><ellipse cx="959.2" cy="236.2313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="204.8" x="964" y="238.7996">void removeClient(const std::string &amp;clientId)</text><ellipse cx="959.2" cy="246.475" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="668.8" x="964" y="249.0434">Intervention * addIntervention(const Date &amp;start, const std::string &amp;service, bool forcePro, const std::string &amp;clientId, unsigned int nrOfRooms = 0)</text><ellipse cx="959.2" cy="256.7188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="346.4" x="964" y="259.2871">void changeInterventionState(Intervention *intervention, processState state)</text><ellipse cx="959.2" cy="266.9625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="233.6" x="964" y="269.5309">void processTransaction(Intervention *intervention)</text><ellipse cx="959.2" cy="277.2063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="348.8" x="964" y="279.7746">std::vector&lt;Intervention *&gt; getAssociatedInterventions(const std::string &amp;id)</text><ellipse cx="959.2" cy="287.45" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="376.8" x="964" y="290.0184">std::vector&lt;Intervention *&gt; getAssociatedActiveInterventions(const std::string &amp;id)</text><ellipse cx="959.2" cy="297.6938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="368" x="964" y="300.2621">std::vector&lt;Intervention *&gt; getAssociatedPastInterventions(const std::string &amp;id)</text><ellipse cx="959.2" cy="307.9375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="239.2" x="964" y="310.5059">std::vector&lt;Intervention *&gt; getAllPastInterventions()</text><ellipse cx="959.2" cy="318.1813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="248" x="964" y="320.7496">std::vector&lt;Intervention *&gt; getAllActiveInterventions()</text><ellipse cx="959.2" cy="328.425" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="574.4" x="964" y="330.9934">void assignCollaborator(Intervention *intervention, const std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; &amp;orderedCollabs)</text><ellipse cx="959.2" cy="338.6688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="356.8" x="964" y="341.2371">std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; sortCollaboratorsByScore()</text><ellipse cx="959.2" cy="348.9125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="241.6" x="964" y="351.4809">Individual *findByUsername(const std::string &amp;name)</text><ellipse cx="959.2" cy="359.1563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="223.2" x="964" y="361.7246">void markAsComplete(Intervention *intervention)</text><ellipse cx="959.2" cy="369.4" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="110.4" x="964" y="371.9684">float getEarnings() const</text><ellipse cx="959.2" cy="379.6438" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="136" x="964" y="382.2121">class UnavailableAppointment</text><ellipse cx="959.2" cy="389.8875" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="112.8" x="964" y="392.4559">class NonexistentService</text><ellipse cx="959.2" cy="400.1313" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="95.2" x="964" y="402.6996">class ExistentService</text><ellipse cx="959.2" cy="410.375" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="107.2" x="964" y="412.9434">class NonexistentCollab</text><ellipse cx="959.2" cy="420.6188" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="94.4" x="964" y="423.1871">class AssignedCollab</text><ellipse cx="959.2" cy="430.8625" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="104.8" x="964" y="433.4309">class NonexistentClient</text><ellipse cx="959.2" cy="441.1063" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="87.2" x="964" y="443.6746">class ExistentClient</text><ellipse cx="959.2" cy="451.35" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="125.6" x="964" y="453.9184">class NonexistentUsername</text><ellipse cx="959.2" cy="461.5938" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="107.2" x="964" y="464.1621">class UnableToWriteFile</text><ellipse cx="959.2" cy="471.8375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="100.8" x="964" y="474.4059">void writeCollabsInfo()</text><ellipse cx="959.2" cy="482.0813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="98.4" x="964" y="484.6496">void writeClientsInfo()</text><ellipse cx="959.2" cy="492.325" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="106.4" x="964" y="494.8934">void writeServicesInfo()</text><ellipse cx="959.2" cy="502.5688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="127.2" x="964" y="505.1371">void writeInterventionsInfo()</text><ellipse cx="959.2" cy="512.8125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="134.4" x="964" y="515.3809">void writeFinancialInfo() const</text><ellipse cx="959.2" cy="523.0563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="489.6" x="964" y="525.6246">void addAvailablePaintService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><!--MD5=[91506c20fa69d22eac57944020c826c2]
class Intervention--><rect codeLine="124" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="269.2063" id="Intervention" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="703.2" x="249.6" y="589.2"/><ellipse cx="571.2" cy="599.6" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M573.5,602.3375 Q573.0375,602.5625 572.5375,602.6875 Q572.05,602.8 571.5125,602.8 Q569.9125,602.8 568.975,601.9375 Q568.0375,601.075 568.0375,599.6 Q568.0375,598.1125 568.975,597.2625 Q569.9125,596.4 571.5125,596.4 Q572.05,596.4 572.5375,596.525 Q573.0375,596.6375 573.5,596.8625 L573.5,598.1375 Q573.0375,597.85 572.5875,597.7125 Q572.1375,597.5625 571.65,597.5625 Q570.7625,597.5625 570.25,598.1125 Q569.75,598.65 569.75,599.6 Q569.75,600.55 570.25,601.0875 Q570.7625,601.625 571.65,601.625 Q572.1375,601.625 572.5875,601.4875 Q573.0375,601.3375 573.5,601.05 L573.5,602.3375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="54.4" x="584" y="602.6465">Intervention</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="250.4" x2="952" y1="610" y2="610"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="256" y="616.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="263.2" y="621.3684">std::string _clientId</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="256" y="626.6438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88" x="263.2" y="631.6121">std::string _collabId</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="256" y="636.8875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="263.2" y="641.8559">Date _startingTime</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="256" y="647.1313"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="66.4" x="263.2" y="652.0996">Service* _type</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="256" y="657.375"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="60.8" x="263.2" y="662.3434">bool forcePro</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="256" y="667.6188"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88.8" x="263.2" y="672.5871">processState _state</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="256" y="677.8625"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="46.4" x="263.2" y="682.8309">float _cost</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="250.4" x2="952" y1="688.1063" y2="688.1063"/><ellipse cx="258.4" cy="696.9063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="684.8" x="263.2" y="699.4746">Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)</text><ellipse cx="258.4" cy="707.15" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="68" x="263.2" y="709.7184">~Intervention()</text><ellipse cx="258.4" cy="717.3938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="129.6" x="263.2" y="719.9621">Date getStartingTime() const</text><ellipse cx="258.4" cy="727.6375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="126.4" x="263.2" y="730.2059">Service * getService() const</text><ellipse cx="258.4" cy="737.8813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="110.4" x="263.2" y="740.4496">bool getForcePro() const</text><ellipse cx="258.4" cy="748.125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="132.8" x="263.2" y="750.6934">std::string getCollabId() const</text><ellipse cx="258.4" cy="758.3688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="130.4" x="263.2" y="760.9371">std::string getClientId() const</text><ellipse cx="258.4" cy="768.6125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="196" x="263.2" y="771.1809">void setCollabId(const std::string &amp;collabId)</text><ellipse cx="258.4" cy="778.8563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="191.2" x="263.2" y="781.4246">void setClientId(const std::string &amp;clientId)</text><ellipse cx="258.4" cy="789.1" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="140.8" x="263.2" y="791.6684">processState getProcessState()</text><ellipse cx="258.4" cy="799.3438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="184.8" x="263.2" y="801.9121">void setProcessState(processState state)</text><ellipse cx="258.4" cy="809.5875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="312" x="263.2" y="812.1559">bool conflictsWith(const Date &amp;start, const Duration &amp;duration) const</text><ellipse cx="258.4" cy="819.8313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88.8" x="263.2" y="822.3996">void calculateCost()</text><ellipse cx="258.4" cy="830.075" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="91.2" x="263.2" y="832.6434">float getCost() const</text><ellipse cx="258.4" cy="840.3188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="111.2" x="263.2" y="842.8871">Date getEndTime() const</text><ellipse cx="258.4" cy="850.5625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="91.2" x="263.2" y="853.1309">bool isActive() const</text><!--MD5=[3ada0b1ccda01f6af47785107eed7eb1]
class Individual--><rect codeLine="151" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="125.7938" id="Individual" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="411.2" x="1697.2" y="205.6"/><ellipse cx="1878.4" cy="216" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1880.7,218.7375 Q1880.2375,218.9625 1879.7375,219.0875 Q1879.25,219.2 1878.7125,219.2 Q1877.1125,219.2 1876.175,218.3375 Q1875.2375,217.475 1875.2375,216 Q1875.2375,214.5125 1876.175,213.6625 Q1877.1125,212.8 1878.7125,212.8 Q1879.25,212.8 1879.7375,212.925 Q1880.2375,213.0375 1880.7,213.2625 L1880.7,214.5375 Q1880.2375,214.25 1879.7875,214.1125 Q1879.3375,213.9625 1878.85,213.9625 Q1877.9625,213.9625 1877.45,214.5125 Q1876.95,215.05 1876.95,216 Q1876.95,216.95 1877.45,217.4875 Q1877.9625,218.025 1878.85,218.025 Q1879.3375,218.025 1879.7875,217.8875 Q1880.2375,217.7375 1880.7,217.45 L1880.7,218.7375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="43.2" x="1891.2" y="219.0465">Individual</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1698" x2="2107.6" y1="226.4" y2="226.4"/><polygon fill="none" points="1706,231.2,1709.2,234.4,1706,237.6,1702.8,234.4" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="112" x="1710.8" y="237.7684">std::string _displayName</text><polygon fill="none" points="1706,241.4438,1709.2,244.6438,1706,247.8438,1702.8,244.6438" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="71.2" x="1710.8" y="248.0121">unsigned int _id</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="1698" x2="2107.6" y1="253.2875" y2="253.2875"/><ellipse cx="1706" cy="262.0875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="49.6" x="1710.8" y="264.6559">Individual()</text><ellipse cx="1706" cy="272.3313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="159.2" x="1710.8" y="274.8996">explicit Individual(std::string name)</text><ellipse cx="1706" cy="282.575" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="104.8" x="1710.8" y="285.1434">std::string getId() const</text><ellipse cx="1706" cy="292.8188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="311.2" x="1710.8" y="295.3871">void changeUsername(HouseMaster &amp;hm, std::string newUsername)</text><ellipse cx="1706" cy="303.0625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="361.6" x="1710.8" y="305.6309">std::vector&lt;Intervention*&gt;getAssociatedInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1706" cy="313.3063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="392.8" x="1710.8" y="315.8746">std::vector&lt;Intervention*&gt; getAssociatedActiveInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1706" cy="323.55" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="123.2" x="1710.8" y="326.1184">std::string getName() const</text><!--MD5=[f483d6e5de34a60207b28a5563be5e8b]
class Collaborator--><rect codeLine="164" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="289.6938" id="Collaborator" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="552" x="1646" y="579.2"/><ellipse cx="1891.2" cy="589.6" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1893.5,592.3375 Q1893.0375,592.5625 1892.5375,592.6875 Q1892.05,592.8 1891.5125,592.8 Q1889.9125,592.8 1888.975,591.9375 Q1888.0375,591.075 1888.0375,589.6 Q1888.0375,588.1125 1888.975,587.2625 Q1889.9125,586.4 1891.5125,586.4 Q1892.05,586.4 1892.5375,586.525 Q1893.0375,586.6375 1893.5,586.8625 L1893.5,588.1375 Q1893.0375,587.85 1892.5875,587.7125 Q1892.1375,587.5625 1891.65,587.5625 Q1890.7625,587.5625 1890.25,588.1125 Q1889.75,588.65 1889.75,589.6 Q1889.75,590.55 1890.25,591.0875 Q1890.7625,591.625 1891.65,591.625 Q1892.1375,591.625 1892.5875,591.4875 Q1893.0375,591.3375 1893.5,591.05 L1893.5,592.3375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="56" x="1904" y="592.6465">Collaborator</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1646.8" x2="2197.2" y1="600" y2="600"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1652.4" y="606.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="192.8" x="1659.6" y="611.3684">std::vector&lt;Classification&gt; _classifications</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1652.4" y="616.6438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="154.4" x="1659.6" y="621.6121">std::vector&lt;std::string&gt; _services</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1652.4" y="626.8875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="92" x="1659.6" y="631.8559">Classification _score</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1652.4" y="637.1313"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="42.4" x="1659.6" y="642.0996">bool _pro</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1652.4" y="647.375"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="1659.6" y="652.3434">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="1646.8" x2="2197.2" y1="657.6188" y2="657.6188"/><ellipse cx="1654.8" cy="666.4188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="533.6" x="1659.6" y="668.9871">Collaborator(std::vector&lt;std::string&gt; services, const std::string &amp;name, bool pro, float earnings, Classification score)</text><ellipse cx="1654.8" cy="676.6625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="111.2" x="1659.6" y="679.2309">~Collaborator() override</text><ellipse cx="1654.8" cy="686.9063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="171.2" x="1659.6" y="689.4746">std::vector&lt;std::string&gt; getServices()</text><ellipse cx="1654.8" cy="697.15" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="78.4" x="1659.6" y="699.7184">bool isPro() const</text><ellipse cx="1654.8" cy="707.3938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="197.6" x="1659.6" y="709.9621">bool canPreform(const std::string &amp;service)</text><ellipse cx="1654.8" cy="717.6375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="421.6" x="1659.6" y="720.2059">bool isAvailable(HouseMaster &amp;hm, const std::string &amp;collabId, Date start, Duration duration)</text><ellipse cx="1654.8" cy="727.8813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="292.8" x="1659.6" y="730.4496">bool hasQualificationToPreform(Intervention *intervention) const</text><ellipse cx="1654.8" cy="738.125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="387.2" x="1659.6" y="740.6934">bool canDo(HouseMaster &amp;hm, const std::string &amp;collabId, Intervention *intervention)</text><ellipse cx="1654.8" cy="748.3688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88" x="1659.6" y="750.9371">int getScore() const</text><ellipse cx="1654.8" cy="758.6125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="224.8" x="1659.6" y="761.1809">void addClassification(Classification classification)</text><ellipse cx="1654.8" cy="768.8563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="195.2" x="1659.6" y="771.4246">void addService(const std::string &amp;service)</text><ellipse cx="1654.8" cy="779.1" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277.6" x="1659.6" y="781.6684">void markInterventionAsComplete(Intervention *intervention)</text><ellipse cx="1654.8" cy="789.3438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="1659.6" y="791.9121">void updateScore()</text><ellipse cx="1654.8" cy="799.5875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="192" x="1659.6" y="802.1559">void calculateEarnings(float &amp;hmEarnings)</text><ellipse cx="1654.8" cy="809.8313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="110.4" x="1659.6" y="812.3996">float getEarnings() const</text><ellipse cx="1654.8" cy="820.075" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="120.8" x="1659.6" y="822.6434">float commissionByScore()</text><ellipse cx="1654.8" cy="830.3188" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="102.4" x="1659.6" y="832.8871">unsigned int _idSeqCol</text><ellipse cx="1654.8" cy="840.5625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146.4" x="1659.6" y="843.1309">std::string getId() const override</text><ellipse cx="1654.8" cy="850.8063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="222.4" x="1659.6" y="853.3746">bool operator==(const Collaborator &amp;ind2) const</text><ellipse cx="1654.8" cy="861.05" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="214.4" x="1659.6" y="863.6184">bool operator&lt;(const Collaborator &amp;col2) const</text><!--MD5=[ed6624c6556d5e7b1bd23032162d20b7]
class Client--><rect codeLine="193" fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="156.525" id="Client" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="636.8" x="981.2" y="645.6"/><ellipse cx="1284" cy="656" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1286.3,658.7375 Q1285.8375,658.9625 1285.3375,659.0875 Q1284.85,659.2 1284.3125,659.2 Q1282.7125,659.2 1281.775,658.3375 Q1280.8375,657.475 1280.8375,656 Q1280.8375,654.5125 1281.775,653.6625 Q1282.7125,652.8 1284.3125,652.8 Q1284.85,652.8 1285.3375,652.925 Q1285.8375,653.0375 1286.3,653.2625 L1286.3,654.5375 Q1285.8375,654.25 1285.3875,654.1125 Q1284.9375,653.9625 1284.45,653.9625 Q1283.5625,653.9625 1283.05,654.5125 Q1282.55,655.05 1282.55,656 Q1282.55,656.95 1283.05,657.4875 Q1283.5625,658.025 1284.45,658.025 Q1284.9375,658.025 1285.3875,657.8875 Q1285.8375,657.7375 1286.3,657.45 L1286.3,658.7375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="25.6" x="1296.8" y="659.0465">Client</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="982" x2="1617.2" y1="666.4" y2="666.4"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="987.6" y="672.8"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="74.4" x="994.8" y="677.7684">unsigned int _nif</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="987.6" y="683.0438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="68" x="994.8" y="688.0121">bool _premium</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="982" x2="1617.2" y1="693.2875" y2="693.2875"/><ellipse cx="990" cy="702.0875" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="100" x="994.8" y="704.6559">unsigned int _idSeqClt</text><ellipse cx="990" cy="712.3313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="286.4" x="994.8" y="714.8996">Client(unsigned int nif, const std::string &amp;name, bool premium)</text><ellipse cx="990" cy="722.575" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="125.6" x="994.8" y="725.1434">~Client() override = default</text><ellipse cx="990" cy="732.8188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="91.2" x="994.8" y="735.3871">unsigned int getNif()</text><ellipse cx="990" cy="743.0625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="104" x="994.8" y="745.6309">bool isPremium() const</text><ellipse cx="990" cy="753.3063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146.4" x="994.8" y="755.8746">std::string getId() const override</text><ellipse cx="990" cy="763.55" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="618.4" x="994.8" y="766.1184">void requestIntervention(HouseMaster &amp;hm, const Date &amp;date, const std::string &amp;service, bool forcePro, unsigned int nrOfRooms) const</text><ellipse cx="990" cy="773.7938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="228.8" x="994.8" y="776.3621">void cancelIntervention(Intervention *intervention)</text><ellipse cx="990" cy="784.0375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="452" x="994.8" y="786.6059">void classifyCollaborator(HouseMaster &amp;hm, const std::string &amp;collabId, Classification classification)</text><ellipse cx="990" cy="794.2813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="192" x="994.8" y="796.8496">bool operator==(const Client &amp;ind2) const</text><!--MD5=[795a4aacf1bde433470b0e5b01d3050a]
class date--><rect fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="33.6" id="date" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="40.8" x="2234.4" y="251.6"/><ellipse cx="2244" cy="262" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M2246.3,264.7375 Q2245.8375,264.9625 2245.3375,265.0875 Q2244.85,265.2 2244.3125,265.2 Q2242.7125,265.2 2241.775,264.3375 Q2240.8375,263.475 2240.8375,262 Q2240.8375,260.5125 2241.775,259.6625 Q2242.7125,258.8 2244.3125,258.8 Q2244.85,258.8 2245.3375,258.925 Q2245.8375,259.0375 2246.3,259.2625 L2246.3,260.5375 Q2245.8375,260.25 2245.3875,260.1125 Q2244.9375,259.9625 2244.45,259.9625 Q2243.5625,259.9625 2243.05,260.5125 Q2242.55,261.05 2242.55,262 Q2242.55,262.95 2243.05,263.4875 Q2243.5625,264.025 2244.45,264.025 Q2244.9375,264.025 2245.3875,263.8875 Q2245.8375,263.7375 2246.3,263.45 L2246.3,264.7375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="20" x="2252.8" y="265.0465">date</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="2235.2" x2="2274.4" y1="272.4" y2="272.4"/><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="2235.2" x2="2274.4" y1="278.8" y2="278.8"/><!--MD5=[90eaa09046263e8c6658c78290042555]
class duration--><rect fill="#CCCCCC" filter="url(#fxh9x862fl4tt)" height="33.6" id="duration" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="58.4" x="2225.6" y="707.2"/><ellipse cx="2235.2" cy="717.6" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M2237.5,720.3375 Q2237.0375,720.5625 2236.5375,720.6875 Q2236.05,720.8 2235.5125,720.8 Q2233.9125,720.8 2232.975,719.9375 Q2232.0375,719.075 2232.0375,717.6 Q2232.0375,716.1125 2232.975,715.2625 Q2233.9125,714.4 2235.5125,714.4 Q2236.05,714.4 2236.5375,714.525 Q2237.0375,714.6375 2237.5,714.8625 L2237.5,716.1375 Q2237.0375,715.85 2236.5875,715.7125 Q2236.1375,715.5625 2235.65,715.5625 Q2234.7625,715.5625 2234.25,716.1125 Q2233.75,716.65 2233.75,717.6 Q2233.75,718.55 2234.25,719.0875 Q2234.7625,719.625 2235.65,719.625 Q2236.1375,719.625 2236.5875,719.4875 Q2237.0375,719.3375 2237.5,719.05 L2237.5,720.3375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="37.6" x="2244" y="720.6465">duration</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="2226.4" x2="2283.2" y1="728" y2="728"/><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="2226.4" x2="2283.2" y1="734.4" y2="734.4"/><!--MD5=[8d1d930e92d69d0f63c31789944ca4f0]
reverse link Individual to Collaborator--><path codeLine="210" d="M1906.112,347.504 C1908.8,411.032 1912.656,502.296 1915.904,578.968 " fill="none" id="Individual-backto-Collaborator" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="1900.512,347.6,1905.432,331.376,1911.704,347.12,1900.512,347.6" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[f2f702391b19b694c366b89ff259a1c9]
reverse link Individual to Client--><path codeLine="211" d="M1846.016,344.008 C1800.704,400.264 1733.336,476.712 1662.8,531.2 C1605.864,575.184 1537.4,614.32 1475.344,645.592 " fill="none" id="Individual-backto-Client" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="1841.832,340.264,1856.192,331.248,1850.592,347.248,1841.832,340.264" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[bfd708e79445d55f06d2a69bba87afd7]
reverse link date to duration--><path codeLine="212" d="M2254.8,301.496 C2254.8,391.176 2254.8,640.936 2254.8,707 " fill="none" id="date-backto-duration" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="2249.2,301.36,2254.8,285.36,2260.4,301.36,2249.2,301.36" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[9b596b60bea1e93eaea4273809ede9f7]
reverse link Service to Painting--><path codeLine="213" d="M191.6,1104.992 C191.6,1125.528 191.6,1146.064 191.6,1162.192 " fill="none" id="Service-backto-Painting" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="186,1104.984,191.6,1088.984,197.2,1104.984,186,1104.984" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[f7376124c70693f07b59c98ff50cd4a4]
reverse link HouseMaster to Client--><path codeLine="214" d="M1299.6,541.76 C1299.6,579.568 1299.6,615.608 1299.6,645.464 " fill="none" id="HouseMaster-backto-Client" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#FFFFFF" points="1299.6,531.32,1296.4,536.12,1299.6,540.92,1302.8,536.12,1299.6,531.32" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[695a4985b4a856d73a05f6bd0c943d0c]
reverse link HouseMaster to Collaborator--><path codeLine="215" d="M1657.448,530.224 C1680.32,546.912 1702.856,563.344 1724.528,579.16 " fill="none" id="HouseMaster-backto-Collaborator" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#FFFFFF" points="1649.008,524.072,1651.0008,529.4858,1656.7646,529.7285,1654.7718,524.3147,1649.008,524.072" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[7d871f9c8add411a0ead6405517479ed]
reverse link HouseMaster to Intervention--><path codeLine="216" d="M941.28,502.128 C895.416,531.944 849.776,561.616 807.504,589.088 " fill="none" id="HouseMaster-backto-Intervention" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="950.144,496.368,944.3755,496.3012,942.0952,501.6003,947.8637,501.6671,950.144,496.368" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[d193e677350051aed924e61da77287e0]
reverse link Collaborator to classification--><path codeLine="217" d="M1922,879.56 C1922,909.512 1922,938.904 1922,962.592 " fill="none" id="Collaborator-backto-classification" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="1922,868.952,1918.8,873.752,1922,878.552,1925.2,873.752,1922,868.952" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[5e74255e6548edae4a1e429487e00874]
reverse link Intervention to Service--><path codeLine="218" d="M403.128,865.032 C365.376,891.768 327.32,918.712 294.096,942.232 " fill="none" id="Intervention-backto-Service" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="411.688,858.976,405.9214,859.1377,403.8527,864.5229,409.6193,864.3612,411.688,858.976" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[abc7dc0627f78551ca2688d2e53e79d6]
reverse link Intervention to processState--><path codeLine="219" d="M523.384,868.384 C514.544,884.712 505.672,901.112 497.2,916.8 C485.168,939.072 471.624,964.216 461.264,983.456 " fill="none" id="Intervention-backto-processState" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="528.432,859.056,523.333,861.7541,523.8624,867.4987,528.9614,864.8005,528.432,859.056" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[403a0b419d4ed172655f60d4279e60e9]
reverse link Intervention to Date--><path codeLine="220" d="M679.2,868.32 C688.088,884.68 696.984,901.056 705.448,916.632 " fill="none" id="Intervention-backto-Date" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#FFFFFF" points="674.12,858.976,673.6047,864.7218,678.7103,867.4074,679.2256,861.6616,674.12,858.976" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[e25c82b72ac52000f19042cdb983f1ae]
reverse link Intervention to Duration--><path codeLine="221" d="M919.472,863.488 C953.72,880.584 987.68,898.504 1019.6,916.8 C1046.112,932 1073.952,950.832 1097.76,967.912 " fill="none" id="Intervention-backto-Duration" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="910.048,858.808,912.9274,863.8069,918.6492,863.0717,915.7698,858.0728,910.048,858.808" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[10f481d74aa4ecbd3cde735a5a5b5160]
@startuml
!define LIGHTORANGE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void usernameMapChanger(std::string id, std::string newUsername)
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + void changeUsername(HouseMaster &hm, std::string newUsername)
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(const std::string &service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 date <|- - duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - Date
 Intervention *- - Duration
@enduml

@startuml










skinparam stereotypeCBackgroundColor FF8800

skinparam backgroundColor fff








skinparam circledCharacter {
  radius 8
  fontSize 11
  fontName Verdana
}

skinparam class {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  attributeFontColor 333
  attributeFontSize 11
  attributeIconSize 11
}


skinparam actor {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam participant {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam collections {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam SequenceBox{
    backgroundColor e0e0e0
  borderColor cccccc
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam interface {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam component {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam node {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam database {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam queue {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam usecase {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam activity {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam sequence {
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  lifeLineBorderColor FF8800
  lifeLineBackgroundColor e0e0e0
}

skinparam boundary {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam control {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam entity {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam state {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
  startColor FF8800
  endColor BB6600
}


skinparam object {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}


skinparam note {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam cloud {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam rectangle {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam storage {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void usernameMapChanger(std::string id, std::string newUsername)
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + void changeUsername(HouseMaster &hm, std::string newUsername)
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(const std::string &service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 date <|- - duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - Date
 Intervention *- - Duration
@enduml

PlantUML version 1.2020.19(Mon Oct 12 16:10:01 WEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: pt
Country: PT
--></g></svg>