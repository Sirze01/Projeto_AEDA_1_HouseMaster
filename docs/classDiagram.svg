<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1268px" preserveAspectRatio="none" style="width:2217px;height:1268px;" version="1.1" viewBox="0 0 2217 1268" width="2217.6px" zoomAndPan="magnify"><defs><filter height="300%" id="f1whv01qxb5s7j" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="1.6"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="3.2" dy="3.2" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[d694de1a4d3eb4abf36fc4a4dacd5966]
class processState--><rect codeLine="4" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="64.3313" id="processState" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="79.2" x="529.2" y="983.6"/><ellipse cx="538.8" cy="994" fill="#EB937F" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M536.4125,990.8 L540.875,990.8 L540.875,992.0125 L538.0625,992.0125 L538.0625,993.2 L540.7,993.2 L540.7,994.425 L538.0625,994.425 L538.0625,995.9875 L540.9625,995.9875 L540.9625,997.2 L536.4125,997.2 L536.4125,990.8 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="58.4" x="547.6" y="997.0465">processState</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="530" x2="607.6" y1="1004.4" y2="1004.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="31.2" x="534" y="1015.7684">Active,</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="46.4" x="534" y="1026.0121">Complete,</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="41.6" x="534" y="1036.2559">Canceled</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="530" x2="607.6" y1="1041.5313" y2="1041.5313"/><!--MD5=[090baa0da4ff03e6b68a244d81271cc4]
class classification--><rect codeLine="11" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="105.3063" id="classification" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="86.4" x="1887.2" y="962.8"/><ellipse cx="1900.4" cy="973.2" fill="#EB937F" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1898.0125,970 L1902.475,970 L1902.475,971.2125 L1899.6625,971.2125 L1899.6625,972.4 L1902.3,972.4 L1902.3,973.625 L1899.6625,973.625 L1899.6625,975.1875 L1902.5625,975.1875 L1902.5625,976.4 L1898.0125,976.4 L1898.0125,970 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="57.6" x="1910" y="976.2465">classification</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1888" x2="1972.8" y1="983.6" y2="983.6"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="1892" y="994.9684">unreliable = -2</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="54.4" x="1892" y="1005.2121">clumsy = -1</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="59.2" x="1892" y="1015.4559">newHere = 0</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="1892" y="1025.6996">getsItDone = 1</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="76.8" x="1892" y="1035.9434">hardWorking = 2</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="59.2" x="1892" y="1046.1871">attentive = 3</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="47.2" x="1892" y="1056.4309">savior = 4</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1888" x2="1972.8" y1="1061.7063" y2="1061.7063"/><!--MD5=[7829b64950ce38e0487c4015ea331f97]
class Date--><rect codeLine="21" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="197.5" id="Date" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="494.4" x="7.2" y="916.8"/><ellipse cx="241.2" cy="927.2" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M243.5,929.9375 Q243.0375,930.1625 242.5375,930.2875 Q242.05,930.4 241.5125,930.4 Q239.9125,930.4 238.975,929.5375 Q238.0375,928.675 238.0375,927.2 Q238.0375,925.7125 238.975,924.8625 Q239.9125,924 241.5125,924 Q242.05,924 242.5375,924.125 Q243.0375,924.2375 243.5,924.4625 L243.5,925.7375 Q243.0375,925.45 242.5875,925.3125 Q242.1375,925.1625 241.65,925.1625 Q240.7625,925.1625 240.25,925.7125 Q239.75,926.25 239.75,927.2 Q239.75,928.15 240.25,928.6875 Q240.7625,929.225 241.65,929.225 Q242.1375,929.225 242.5875,929.0875 Q243.0375,928.9375 243.5,928.65 L243.5,929.9375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="20.8" x="254" y="930.2465">Date</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="8" x2="500.8" y1="937.6" y2="937.6"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.6" y="944"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="94.4" x="20.8" y="948.9684">unsigned int _day{};</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.6" y="954.2438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="106.4" x="20.8" y="959.2121">unsigned int _month{};</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.6" y="964.4875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="98.4" x="20.8" y="969.4559">unsigned int _year{};</text><polygon fill="none" points="16,973.1313,19.2,976.3313,16,979.5313,12.8,976.3313" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88.8" x="20.8" y="979.6996">unsigned int _hours</text><polygon fill="none" points="16,983.375,19.2,986.575,16,989.775,12.8,986.575" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="99.2" x="20.8" y="989.9434">unsigned int _minutes</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="8" x2="500.8" y1="995.2188" y2="995.2188"/><ellipse cx="16" cy="1004.0188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="30.4" x="20.8" y="1006.5871">Date();</text><ellipse cx="16" cy="1014.2625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="476" x="20.8" y="1016.8309">Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);</text><ellipse cx="16" cy="1024.5063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="168.8" x="20.8" y="1027.0746">explicit Date(const std::string &amp;date);</text><ellipse cx="16" cy="1034.75" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="126.4" x="20.8" y="1037.3184">std::string getString() const;</text><ellipse cx="16" cy="1044.9938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="176.8" x="20.8" y="1047.5621">Date operator+(const Date &amp;d1) const;</text><ellipse cx="16" cy="1055.2375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="182.4" x="20.8" y="1057.8059">bool operator==(const Date &amp;d2) const;</text><ellipse cx="16" cy="1065.4813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="175.2" x="20.8" y="1068.0496">bool operator&lt;(const Date &amp;d2) const;</text><ellipse cx="16" cy="1075.725" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="175.2" x="20.8" y="1078.2934">bool operator&gt;(const Date &amp;d2) const;</text><ellipse cx="16" cy="1085.9688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="112.8" x="20.8" y="1088.5371">void checkIfValid() const;</text><rect fill="#F24D5C" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="13.6" y="1093.8125"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="108.8" x="20.8" y="1098.7809">bool isLeapYear() const;</text><ellipse cx="16" cy="1106.4563" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="79.2" x="20.8" y="1109.0246">class InvalidDate;</text><!--MD5=[e7713a66b67445a0eb297b7e73c442e5]
class Duration--><rect codeLine="41" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="95.0625" id="Duration" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="251.2" x="271.2" y="1162.4"/><ellipse cx="374.8" cy="1172.8" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M377.1,1175.5375 Q376.6375,1175.7625 376.1375,1175.8875 Q375.65,1176 375.1125,1176 Q373.5125,1176 372.575,1175.1375 Q371.6375,1174.275 371.6375,1172.8 Q371.6375,1171.3125 372.575,1170.4625 Q373.5125,1169.6 375.1125,1169.6 Q375.65,1169.6 376.1375,1169.725 Q376.6375,1169.8375 377.1,1170.0625 L377.1,1171.3375 Q376.6375,1171.05 376.1875,1170.9125 Q375.7375,1170.7625 375.25,1170.7625 Q374.3625,1170.7625 373.85,1171.3125 Q373.35,1171.85 373.35,1172.8 Q373.35,1173.75 373.85,1174.2875 Q374.3625,1174.825 375.25,1174.825 Q375.7375,1174.825 376.1875,1174.6875 Q376.6375,1174.5375 377.1,1174.25 L377.1,1175.5375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="38.4" x="387.6" y="1175.8465">Duration</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="272" x2="521.6" y1="1183.2" y2="1183.2"/><ellipse cx="280" cy="1192" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="96.8" x="284.8" y="1194.5684">class InvalidDuration;</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="272" x2="521.6" y1="1199.8438" y2="1199.8438"/><ellipse cx="280" cy="1208.6438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="48" x="284.8" y="1211.2121">Duration();</text><ellipse cx="280" cy="1218.8875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="232.8" x="284.8" y="1221.4559">Duration(unsigned int hours, unsigned int minutes);</text><ellipse cx="280" cy="1229.1313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="204" x="284.8" y="1231.6996">explicit Duration(const std::string &amp;duration);</text><ellipse cx="280" cy="1239.375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="168" x="284.8" y="1241.9434">std::string getString() const override;</text><ellipse cx="280" cy="1249.6188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154.4" x="284.8" y="1252.1871">void checkIfValid() const override;</text><!--MD5=[dbb8b4f13c7b21394f9d757e58732f45]
class Service--><rect codeLine="50" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="146.2813" id="Service" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="369.6" x="693.6" y="942.4"/><ellipse cx="858.8" cy="952.8" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M861.1,955.5375 Q860.6375,955.7625 860.1375,955.8875 Q859.65,956 859.1125,956 Q857.5125,956 856.575,955.1375 Q855.6375,954.275 855.6375,952.8 Q855.6375,951.3125 856.575,950.4625 Q857.5125,949.6 859.1125,949.6 Q859.65,949.6 860.1375,949.725 Q860.6375,949.8375 861.1,950.0625 L861.1,951.3375 Q860.6375,951.05 860.1875,950.9125 Q859.7375,950.7625 859.25,950.7625 Q858.3625,950.7625 857.85,951.3125 Q857.35,951.85 857.35,952.8 Q857.35,953.75 857.85,954.2875 Q858.3625,954.825 859.25,954.825 Q859.7375,954.825 860.1875,954.6875 Q860.6375,954.5375 861.1,954.25 L861.1,955.5375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="33.6" x="871.6" y="955.8465">Service</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="694.4" x2="1062.4" y1="963.2" y2="963.2"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="700" y="969.6"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="79.2" x="707.2" y="974.5684">std::string _name</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="700" y="979.8438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="42.4" x="707.2" y="984.8121">bool _pro</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="700" y="990.0875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="72" x="707.2" y="995.0559">float _basePrice</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="700" y="1000.3313"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="83.2" x="707.2" y="1005.2996">duration _duration</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="694.4" x2="1062.4" y1="1010.575" y2="1010.575"/><ellipse cx="702.4" cy="1019.375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="40" x="707.2" y="1021.9434">Service()</text><ellipse cx="702.4" cy="1029.6188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="351.2" x="707.2" y="1032.1871">Service(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="702.4" cy="1039.8625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="123.2" x="707.2" y="1042.4309">std::string getName() const</text><ellipse cx="702.4" cy="1050.1063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="707.2" y="1052.6746">bool getPro() const</text><ellipse cx="702.4" cy="1060.35" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="116" x="707.2" y="1062.9184">float getBasePrice() const</text><ellipse cx="702.4" cy="1070.5938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="127.2" x="707.2" y="1073.1621">duration getDuration() const</text><ellipse cx="702.4" cy="1080.8375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="66.4" x="707.2" y="1083.4059">float getPrice()</text><!--MD5=[ccb6b53f2b3136c820d7801ae6f29901]
class Painting--><rect codeLine="65" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="64.3313" id="Painting" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="372" x="692.4" y="1178"/><ellipse cx="857.6" cy="1188.4" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M859.9,1191.1375 Q859.4375,1191.3625 858.9375,1191.4875 Q858.45,1191.6 857.9125,1191.6 Q856.3125,1191.6 855.375,1190.7375 Q854.4375,1189.875 854.4375,1188.4 Q854.4375,1186.9125 855.375,1186.0625 Q856.3125,1185.2 857.9125,1185.2 Q858.45,1185.2 858.9375,1185.325 Q859.4375,1185.4375 859.9,1185.6625 L859.9,1186.9375 Q859.4375,1186.65 858.9875,1186.5125 Q858.5375,1186.3625 858.05,1186.3625 Q857.1625,1186.3625 856.65,1186.9125 Q856.15,1187.45 856.15,1188.4 Q856.15,1189.35 856.65,1189.8875 Q857.1625,1190.425 858.05,1190.425 Q858.5375,1190.425 858.9875,1190.2875 Q859.4375,1190.1375 859.9,1189.85 L859.9,1191.1375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="36" x="870.4" y="1191.4465">Painting</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="693.2" x2="1063.6" y1="1198.8" y2="1198.8"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="698.8" y="1205.2"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="123.2" x="706" y="1210.1684">unsigned int _roomNumber</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="693.2" x2="1063.6" y1="1215.4438" y2="1215.4438"/><ellipse cx="701.2" cy="1224.2438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="353.6" x="706" y="1226.8121">Painting(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="701.2" cy="1234.4875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="108" x="706" y="1237.0559">float getPrice() override</text><!--MD5=[34fc254bc528b6b0fa50d673940a681f]
class HouseMaster--><rect codeLine="72" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="525.3" id="HouseMaster" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="698.4" x="958.8" y="5.6"/><ellipse cx="1276" cy="16" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1278.3,18.7375 Q1277.8375,18.9625 1277.3375,19.0875 Q1276.85,19.2 1276.3125,19.2 Q1274.7125,19.2 1273.775,18.3375 Q1272.8375,17.475 1272.8375,16 Q1272.8375,14.5125 1273.775,13.6625 Q1274.7125,12.8 1276.3125,12.8 Q1276.85,12.8 1277.3375,12.925 Q1277.8375,13.0375 1278.3,13.2625 L1278.3,14.5375 Q1277.8375,14.25 1277.3875,14.1125 Q1276.9375,13.9625 1276.45,13.9625 Q1275.5625,13.9625 1275.05,14.5125 Q1274.55,15.05 1274.55,16 Q1274.55,16.95 1275.05,17.4875 Q1275.5625,18.025 1276.45,18.025 Q1276.9375,18.025 1277.3875,17.8875 Q1277.8375,17.7375 1278.3,17.45 L1278.3,18.7375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="58.4" x="1288.8" y="19.0465">HouseMaster</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="959.6" x2="1656.4" y1="26.4" y2="26.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="287.2" x="963.6" y="37.7684">std::unordered_map&lt;std::string, Service *&gt; _availableServices</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="176.8" x="963.6" y="48.0121">std::map&lt;std::string, Client *&gt; _clients</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="276" x="963.6" y="58.2559">std::unordered_map&lt;std::string, std::string&gt; _usernameMap</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="237.6" x="963.6" y="68.4996">std::map&lt;std::string, Collaborator *&gt; _collaborators</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="229.6" x="963.6" y="78.7434">std::unordered_set&lt;Intervention *&gt; _interventions</text><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="963.6" y="88.9871">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="959.6" x2="1656.4" y1="94.2625" y2="94.2625"/><ellipse cx="967.6" cy="103.0625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="64.8" x="972.4" y="105.6309">HouseMaster()</text><ellipse cx="967.6" cy="113.3063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="590.4" x="972.4" y="115.8746">HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)</text><ellipse cx="967.6" cy="123.55" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="116.8" x="972.4" y="126.1184">~HouseMaster() = default</text><ellipse cx="967.6" cy="133.7938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="262.4" x="972.4" y="136.3621">std::map&lt;std::string, Collaborator *&gt; &amp;getCollaborators()</text><ellipse cx="967.6" cy="144.0375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="201.6" x="972.4" y="146.6059">std::map&lt;std::string, Client *&gt; &amp;getClients()</text><ellipse cx="967.6" cy="154.2813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="256" x="972.4" y="156.8496">std::unordered_set&lt;Intervention *&gt; &amp; getInterventions()</text><ellipse cx="967.6" cy="164.525" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="467.2" x="972.4" y="167.0934">void addAvailableService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><ellipse cx="967.6" cy="174.7688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="255.2" x="972.4" y="177.3371">void removeAvailableService(const std::string &amp;service)</text><ellipse cx="967.6" cy="185.0125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="311.2" x="972.4" y="187.5809">std::unordered_map&lt;std::string, Service *&gt; &amp;getAvailableServices()</text><ellipse cx="967.6" cy="195.2563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="308" x="972.4" y="197.8246">void usernameMapChanger(std::string id, std::string newUsername)</text><ellipse cx="967.6" cy="205.5" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="226.4" x="972.4" y="208.0684">void removeCollaborator(const std::string &amp;collId)</text><ellipse cx="967.6" cy="215.7438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="680" x="972.4" y="218.3121">void addCollaborator(const std::vector&lt;std::string&gt; &amp;services, const std::string &amp;name, bool pro, float earnings = 0, Classification score = newHere)</text><ellipse cx="967.6" cy="225.9875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="333.6" x="972.4" y="228.5559">void addClient(unsigned long nif, const std::string &amp;name, bool premium)</text><ellipse cx="967.6" cy="236.2313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="204.8" x="972.4" y="238.7996">void removeClient(const std::string &amp;clientId)</text><ellipse cx="967.6" cy="246.475" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="668.8" x="972.4" y="249.0434">Intervention * addIntervention(const Date &amp;start, const std::string &amp;service, bool forcePro, const std::string &amp;clientId, unsigned int nrOfRooms = 0)</text><ellipse cx="967.6" cy="256.7188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="346.4" x="972.4" y="259.2871">void changeInterventionState(Intervention *intervention, processState state)</text><ellipse cx="967.6" cy="266.9625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="233.6" x="972.4" y="269.5309">void processTransaction(Intervention *intervention)</text><ellipse cx="967.6" cy="277.2063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="348.8" x="972.4" y="279.7746">std::vector&lt;Intervention *&gt; getAssociatedInterventions(const std::string &amp;id)</text><ellipse cx="967.6" cy="287.45" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="376.8" x="972.4" y="290.0184">std::vector&lt;Intervention *&gt; getAssociatedActiveInterventions(const std::string &amp;id)</text><ellipse cx="967.6" cy="297.6938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="368" x="972.4" y="300.2621">std::vector&lt;Intervention *&gt; getAssociatedPastInterventions(const std::string &amp;id)</text><ellipse cx="967.6" cy="307.9375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="239.2" x="972.4" y="310.5059">std::vector&lt;Intervention *&gt; getAllPastInterventions()</text><ellipse cx="967.6" cy="318.1813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="248" x="972.4" y="320.7496">std::vector&lt;Intervention *&gt; getAllActiveInterventions()</text><ellipse cx="967.6" cy="328.425" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="574.4" x="972.4" y="330.9934">void assignCollaborator(Intervention *intervention, const std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; &amp;orderedCollabs)</text><ellipse cx="967.6" cy="338.6688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="356.8" x="972.4" y="341.2371">std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; sortCollaboratorsByScore()</text><ellipse cx="967.6" cy="348.9125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="241.6" x="972.4" y="351.4809">Individual *findByUsername(const std::string &amp;name)</text><ellipse cx="967.6" cy="359.1563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="223.2" x="972.4" y="361.7246">void markAsComplete(Intervention *intervention)</text><ellipse cx="967.6" cy="369.4" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="110.4" x="972.4" y="371.9684">float getEarnings() const</text><ellipse cx="967.6" cy="379.6438" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="136" x="972.4" y="382.2121">class UnavailableAppointment</text><ellipse cx="967.6" cy="389.8875" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="112.8" x="972.4" y="392.4559">class NonexistentService</text><ellipse cx="967.6" cy="400.1313" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="95.2" x="972.4" y="402.6996">class ExistentService</text><ellipse cx="967.6" cy="410.375" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="107.2" x="972.4" y="412.9434">class NonexistentCollab</text><ellipse cx="967.6" cy="420.6188" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="94.4" x="972.4" y="423.1871">class AssignedCollab</text><ellipse cx="967.6" cy="430.8625" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="104.8" x="972.4" y="433.4309">class NonexistentClient</text><ellipse cx="967.6" cy="441.1063" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="87.2" x="972.4" y="443.6746">class ExistentClient</text><ellipse cx="967.6" cy="451.35" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="125.6" x="972.4" y="453.9184">class NonexistentUsername</text><ellipse cx="967.6" cy="461.5938" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="107.2" x="972.4" y="464.1621">class UnableToWriteFile</text><ellipse cx="967.6" cy="471.8375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="100.8" x="972.4" y="474.4059">void writeCollabsInfo()</text><ellipse cx="967.6" cy="482.0813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="98.4" x="972.4" y="484.6496">void writeClientsInfo()</text><ellipse cx="967.6" cy="492.325" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="106.4" x="972.4" y="494.8934">void writeServicesInfo()</text><ellipse cx="967.6" cy="502.5688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="127.2" x="972.4" y="505.1371">void writeInterventionsInfo()</text><ellipse cx="967.6" cy="512.8125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="134.4" x="972.4" y="515.3809">void writeFinancialInfo() const</text><ellipse cx="967.6" cy="523.0563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="489.6" x="972.4" y="525.6246">void addAvailablePaintService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><!--MD5=[91506c20fa69d22eac57944020c826c2]
class Intervention--><rect codeLine="124" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="269.2063" id="Intervention" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="703.2" x="258" y="589.2"/><ellipse cx="579.6" cy="599.6" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M581.9,602.3375 Q581.4375,602.5625 580.9375,602.6875 Q580.45,602.8 579.9125,602.8 Q578.3125,602.8 577.375,601.9375 Q576.4375,601.075 576.4375,599.6 Q576.4375,598.1125 577.375,597.2625 Q578.3125,596.4 579.9125,596.4 Q580.45,596.4 580.9375,596.525 Q581.4375,596.6375 581.9,596.8625 L581.9,598.1375 Q581.4375,597.85 580.9875,597.7125 Q580.5375,597.5625 580.05,597.5625 Q579.1625,597.5625 578.65,598.1125 Q578.15,598.65 578.15,599.6 Q578.15,600.55 578.65,601.0875 Q579.1625,601.625 580.05,601.625 Q580.5375,601.625 580.9875,601.4875 Q581.4375,601.3375 581.9,601.05 L581.9,602.3375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="54.4" x="592.4" y="602.6465">Intervention</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="258.8" x2="960.4" y1="610" y2="610"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="264.4" y="616.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="271.6" y="621.3684">std::string _clientId</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="264.4" y="626.6438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88" x="271.6" y="631.6121">std::string _collabId</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="264.4" y="636.8875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="271.6" y="641.8559">Date _startingTime</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="264.4" y="647.1313"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="66.4" x="271.6" y="652.0996">Service* _type</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="264.4" y="657.375"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="60.8" x="271.6" y="662.3434">bool forcePro</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="264.4" y="667.6188"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88.8" x="271.6" y="672.5871">processState _state</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="264.4" y="677.8625"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="46.4" x="271.6" y="682.8309">float _cost</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="258.8" x2="960.4" y1="688.1063" y2="688.1063"/><ellipse cx="266.8" cy="696.9063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="684.8" x="271.6" y="699.4746">Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)</text><ellipse cx="266.8" cy="707.15" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="68" x="271.6" y="709.7184">~Intervention()</text><ellipse cx="266.8" cy="717.3938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="129.6" x="271.6" y="719.9621">Date getStartingTime() const</text><ellipse cx="266.8" cy="727.6375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="126.4" x="271.6" y="730.2059">Service * getService() const</text><ellipse cx="266.8" cy="737.8813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="110.4" x="271.6" y="740.4496">bool getForcePro() const</text><ellipse cx="266.8" cy="748.125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="132.8" x="271.6" y="750.6934">std::string getCollabId() const</text><ellipse cx="266.8" cy="758.3688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="130.4" x="271.6" y="760.9371">std::string getClientId() const</text><ellipse cx="266.8" cy="768.6125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="196" x="271.6" y="771.1809">void setCollabId(const std::string &amp;collabId)</text><ellipse cx="266.8" cy="778.8563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="191.2" x="271.6" y="781.4246">void setClientId(const std::string &amp;clientId)</text><ellipse cx="266.8" cy="789.1" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="140.8" x="271.6" y="791.6684">processState getProcessState()</text><ellipse cx="266.8" cy="799.3438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="184.8" x="271.6" y="801.9121">void setProcessState(processState state)</text><ellipse cx="266.8" cy="809.5875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="312" x="271.6" y="812.1559">bool conflictsWith(const Date &amp;start, const Duration &amp;duration) const</text><ellipse cx="266.8" cy="819.8313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88.8" x="271.6" y="822.3996">void calculateCost()</text><ellipse cx="266.8" cy="830.075" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="91.2" x="271.6" y="832.6434">float getCost() const</text><ellipse cx="266.8" cy="840.3188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="111.2" x="271.6" y="842.8871">Date getEndTime() const</text><ellipse cx="266.8" cy="850.5625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="91.2" x="271.6" y="853.1309">bool isActive() const</text><!--MD5=[3ada0b1ccda01f6af47785107eed7eb1]
class Individual--><rect codeLine="151" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="125.7938" id="Individual" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="411.2" x="1704.8" y="205.6"/><ellipse cx="1886" cy="216" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1888.3,218.7375 Q1887.8375,218.9625 1887.3375,219.0875 Q1886.85,219.2 1886.3125,219.2 Q1884.7125,219.2 1883.775,218.3375 Q1882.8375,217.475 1882.8375,216 Q1882.8375,214.5125 1883.775,213.6625 Q1884.7125,212.8 1886.3125,212.8 Q1886.85,212.8 1887.3375,212.925 Q1887.8375,213.0375 1888.3,213.2625 L1888.3,214.5375 Q1887.8375,214.25 1887.3875,214.1125 Q1886.9375,213.9625 1886.45,213.9625 Q1885.5625,213.9625 1885.05,214.5125 Q1884.55,215.05 1884.55,216 Q1884.55,216.95 1885.05,217.4875 Q1885.5625,218.025 1886.45,218.025 Q1886.9375,218.025 1887.3875,217.8875 Q1887.8375,217.7375 1888.3,217.45 L1888.3,218.7375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="43.2" x="1898.8" y="219.0465">Individual</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1705.6" x2="2115.2" y1="226.4" y2="226.4"/><polygon fill="none" points="1713.6,231.2,1716.8,234.4,1713.6,237.6,1710.4,234.4" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="112" x="1718.4" y="237.7684">std::string _displayName</text><polygon fill="none" points="1713.6,241.4438,1716.8,244.6438,1713.6,247.8438,1710.4,244.6438" style="stroke: #B38D22; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="71.2" x="1718.4" y="248.0121">unsigned int _id</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="1705.6" x2="2115.2" y1="253.2875" y2="253.2875"/><ellipse cx="1713.6" cy="262.0875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="49.6" x="1718.4" y="264.6559">Individual()</text><ellipse cx="1713.6" cy="272.3313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="159.2" x="1718.4" y="274.8996">explicit Individual(std::string name)</text><ellipse cx="1713.6" cy="282.575" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="104.8" x="1718.4" y="285.1434">std::string getId() const</text><ellipse cx="1713.6" cy="292.8188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="311.2" x="1718.4" y="295.3871">void changeUsername(HouseMaster &amp;hm, std::string newUsername)</text><ellipse cx="1713.6" cy="303.0625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="361.6" x="1718.4" y="305.6309">std::vector&lt;Intervention*&gt;getAssociatedInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1713.6" cy="313.3063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="392.8" x="1718.4" y="315.8746">std::vector&lt;Intervention*&gt; getAssociatedActiveInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1713.6" cy="323.55" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="123.2" x="1718.4" y="326.1184">std::string getName() const</text><!--MD5=[f483d6e5de34a60207b28a5563be5e8b]
class Collaborator--><rect codeLine="164" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="289.6938" id="Collaborator" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="552" x="1654.4" y="579.2"/><ellipse cx="1899.6" cy="589.6" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1901.9,592.3375 Q1901.4375,592.5625 1900.9375,592.6875 Q1900.45,592.8 1899.9125,592.8 Q1898.3125,592.8 1897.375,591.9375 Q1896.4375,591.075 1896.4375,589.6 Q1896.4375,588.1125 1897.375,587.2625 Q1898.3125,586.4 1899.9125,586.4 Q1900.45,586.4 1900.9375,586.525 Q1901.4375,586.6375 1901.9,586.8625 L1901.9,588.1375 Q1901.4375,587.85 1900.9875,587.7125 Q1900.5375,587.5625 1900.05,587.5625 Q1899.1625,587.5625 1898.65,588.1125 Q1898.15,588.65 1898.15,589.6 Q1898.15,590.55 1898.65,591.0875 Q1899.1625,591.625 1900.05,591.625 Q1900.5375,591.625 1900.9875,591.4875 Q1901.4375,591.3375 1901.9,591.05 L1901.9,592.3375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="56" x="1912.4" y="592.6465">Collaborator</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="1655.2" x2="2205.6" y1="600" y2="600"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1660.8" y="606.4"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="192.8" x="1668" y="611.3684">std::vector&lt;Classification&gt; _classifications</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1660.8" y="616.6438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="154.4" x="1668" y="621.6121">std::vector&lt;std::string&gt; _services</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1660.8" y="626.8875"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="92" x="1668" y="631.8559">Classification _score</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1660.8" y="637.1313"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="42.4" x="1668" y="642.0996">bool _pro</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="1660.8" y="647.375"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="67.2" x="1668" y="652.3434">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="1655.2" x2="2205.6" y1="657.6188" y2="657.6188"/><ellipse cx="1663.2" cy="666.4188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="533.6" x="1668" y="668.9871">Collaborator(std::vector&lt;std::string&gt; services, const std::string &amp;name, bool pro, float earnings, Classification score)</text><ellipse cx="1663.2" cy="676.6625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="111.2" x="1668" y="679.2309">~Collaborator() override</text><ellipse cx="1663.2" cy="686.9063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="171.2" x="1668" y="689.4746">std::vector&lt;std::string&gt; getServices()</text><ellipse cx="1663.2" cy="697.15" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="78.4" x="1668" y="699.7184">bool isPro() const</text><ellipse cx="1663.2" cy="707.3938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="197.6" x="1668" y="709.9621">bool canPreform(const std::string &amp;service)</text><ellipse cx="1663.2" cy="717.6375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="421.6" x="1668" y="720.2059">bool isAvailable(HouseMaster &amp;hm, const std::string &amp;collabId, Date start, Duration duration)</text><ellipse cx="1663.2" cy="727.8813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="292.8" x="1668" y="730.4496">bool hasQualificationToPreform(Intervention *intervention) const</text><ellipse cx="1663.2" cy="738.125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="387.2" x="1668" y="740.6934">bool canDo(HouseMaster &amp;hm, const std::string &amp;collabId, Intervention *intervention)</text><ellipse cx="1663.2" cy="748.3688" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="88" x="1668" y="750.9371">int getScore() const</text><ellipse cx="1663.2" cy="758.6125" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="224.8" x="1668" y="761.1809">void addClassification(Classification classification)</text><ellipse cx="1663.2" cy="768.8563" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="195.2" x="1668" y="771.4246">void addService(const std::string &amp;service)</text><ellipse cx="1663.2" cy="779.1" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277.6" x="1668" y="781.6684">void markInterventionAsComplete(Intervention *intervention)</text><ellipse cx="1663.2" cy="789.3438" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="85.6" x="1668" y="791.9121">void updateScore()</text><ellipse cx="1663.2" cy="799.5875" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="192" x="1668" y="802.1559">void calculateEarnings(float &amp;hmEarnings)</text><ellipse cx="1663.2" cy="809.8313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="110.4" x="1668" y="812.3996">float getEarnings() const</text><ellipse cx="1663.2" cy="820.075" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="120.8" x="1668" y="822.6434">float commissionByScore()</text><ellipse cx="1663.2" cy="830.3188" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="102.4" x="1668" y="832.8871">unsigned int _idSeqCol</text><ellipse cx="1663.2" cy="840.5625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146.4" x="1668" y="843.1309">std::string getId() const override</text><ellipse cx="1663.2" cy="850.8063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="222.4" x="1668" y="853.3746">bool operator==(const Collaborator &amp;ind2) const</text><ellipse cx="1663.2" cy="861.05" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="214.4" x="1668" y="863.6184">bool operator&lt;(const Collaborator &amp;col2) const</text><!--MD5=[ed6624c6556d5e7b1bd23032162d20b7]
class Client--><rect codeLine="193" fill="#CCCCCC" filter="url(#f1whv01qxb5s7j)" height="156.525" id="Client" style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" width="636.8" x="989.6" y="645.6"/><ellipse cx="1292.4" cy="656" fill="#FF8800" rx="6.4" ry="6.4" style="stroke: #AAAAAA; stroke-width: 0.8;"/><path d="M1294.7,658.7375 Q1294.2375,658.9625 1293.7375,659.0875 Q1293.25,659.2 1292.7125,659.2 Q1291.1125,659.2 1290.175,658.3375 Q1289.2375,657.475 1289.2375,656 Q1289.2375,654.5125 1290.175,653.6625 Q1291.1125,652.8 1292.7125,652.8 Q1293.25,652.8 1293.7375,652.925 Q1294.2375,653.0375 1294.7,653.2625 L1294.7,654.5375 Q1294.2375,654.25 1293.7875,654.1125 Q1293.3375,653.9625 1292.85,653.9625 Q1291.9625,653.9625 1291.45,654.5125 Q1290.95,655.05 1290.95,656 Q1290.95,656.95 1291.45,657.4875 Q1291.9625,658.025 1292.85,658.025 Q1293.3375,658.025 1293.7875,657.8875 Q1294.2375,657.7375 1294.7,657.45 L1294.7,658.7375 Z "/><text fill="#000000" font-family="Verdana" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="25.6" x="1305.2" y="659.0465">Client</text><line style="stroke: #AAAAAA; stroke-width: 1.2000000000000002;" x1="990.4" x2="1625.6" y1="666.4" y2="666.4"/><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="996" y="672.8"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="74.4" x="1003.2" y="677.7684">unsigned int _nif</text><rect fill="none" height="4.8" style="stroke: #C82930; stroke-width: 0.8;" width="4.8" x="996" y="683.0438"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="68" x="1003.2" y="688.0121">bool _premium</text><line style="stroke: #AAAAAA; stroke-width: 0.8;" x1="990.4" x2="1625.6" y1="693.2875" y2="693.2875"/><ellipse cx="998.4" cy="702.0875" fill="none" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="100" x="1003.2" y="704.6559">unsigned int _idSeqClt</text><ellipse cx="998.4" cy="712.3313" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="286.4" x="1003.2" y="714.8996">Client(unsigned int nif, const std::string &amp;name, bool premium)</text><ellipse cx="998.4" cy="722.575" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="125.6" x="1003.2" y="725.1434">~Client() override = default</text><ellipse cx="998.4" cy="732.8188" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="91.2" x="1003.2" y="735.3871">unsigned int getNif()</text><ellipse cx="998.4" cy="743.0625" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="104" x="1003.2" y="745.6309">bool isPremium() const</text><ellipse cx="998.4" cy="753.3063" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146.4" x="1003.2" y="755.8746">std::string getId() const override</text><ellipse cx="998.4" cy="763.55" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="618.4" x="1003.2" y="766.1184">void requestIntervention(HouseMaster &amp;hm, const Date &amp;date, const std::string &amp;service, bool forcePro, unsigned int nrOfRooms) const</text><ellipse cx="998.4" cy="773.7938" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="228.8" x="1003.2" y="776.3621">void cancelIntervention(Intervention *intervention)</text><ellipse cx="998.4" cy="784.0375" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="452" x="1003.2" y="786.6059">void classifyCollaborator(HouseMaster &amp;hm, const std::string &amp;collabId, Classification classification)</text><ellipse cx="998.4" cy="794.2813" fill="#84BE84" rx="2.4" ry="2.4" style="stroke: #038048; stroke-width: 0.8;"/><text fill="#333333" font-family="sans-serif" font-size="8.8" lengthAdjust="spacingAndGlyphs" textLength="192" x="1003.2" y="796.8496">bool operator==(const Client &amp;ind2) const</text><!--MD5=[8d1d930e92d69d0f63c31789944ca4f0]
reverse link Individual to Collaborator--><path codeLine="210" d="M1913.848,347.504 C1916.648,411.032 1920.672,502.296 1924.048,578.968 " fill="none" id="Individual-backto-Collaborator" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="1908.248,347.608,1913.136,331.376,1919.44,347.112,1908.248,347.608" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[f2f702391b19b694c366b89ff259a1c9]
reverse link Individual to Client--><path codeLine="211" d="M1853.848,344.016 C1808.72,400.288 1741.584,476.736 1671.2,531.2 C1614.368,575.176 1546.016,614.28 1484.016,645.528 " fill="none" id="Individual-backto-Client" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="1849.648,340.304,1863.984,331.256,1858.416,347.272,1849.648,340.304" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[ce8c4d4cdc325bde0e310b60a9d635c9]
reverse link Date to Duration--><path codeLine="212" d="M336.616,1127.712 C345.552,1139.808 354.248,1151.592 362.128,1162.256 " fill="none" id="Date-backto-Duration" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="331.856,1130.688,326.848,1114.496,340.864,1124.04,331.856,1130.688" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[9b596b60bea1e93eaea4273809ede9f7]
reverse link Service to Painting--><path codeLine="213" d="M878.4,1105.104 C878.4,1131.208 878.4,1158.072 878.4,1177.968 " fill="none" id="Service-backto-Painting" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="none" points="872.8,1105.016,878.4,1089.016,884,1105.016,872.8,1105.016" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[f7376124c70693f07b59c98ff50cd4a4]
reverse link HouseMaster to Client--><path codeLine="214" d="M1308,541.76 C1308,579.568 1308,615.608 1308,645.464 " fill="none" id="HouseMaster-backto-Client" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#FFFFFF" points="1308,531.32,1304.8,536.12,1308,540.92,1311.2,536.12,1308,531.32" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[695a4985b4a856d73a05f6bd0c943d0c]
reverse link HouseMaster to Collaborator--><path codeLine="215" d="M1665.848,530.224 C1688.72,546.912 1711.256,563.344 1732.928,579.16 " fill="none" id="HouseMaster-backto-Collaborator" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#FFFFFF" points="1657.408,524.072,1659.4008,529.4858,1665.1646,529.7285,1663.1718,524.3147,1657.408,524.072" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[7d871f9c8add411a0ead6405517479ed]
reverse link HouseMaster to Intervention--><path codeLine="216" d="M949.68,502.128 C903.816,531.944 858.176,561.616 815.904,589.088 " fill="none" id="HouseMaster-backto-Intervention" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="958.544,496.368,952.7755,496.3012,950.4952,501.6003,956.2637,501.6671,958.544,496.368" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[d193e677350051aed924e61da77287e0]
reverse link Collaborator to classification--><path codeLine="217" d="M1930.4,879.56 C1930.4,909.512 1930.4,938.904 1930.4,962.592 " fill="none" id="Collaborator-backto-classification" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="1930.4,868.952,1927.2,873.752,1930.4,878.552,1933.6,873.752,1930.4,868.952" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[5e74255e6548edae4a1e429487e00874]
reverse link Intervention to Service--><path codeLine="218" d="M741.128,866.704 C765.328,892.808 789.648,919.048 810.96,942.04 " fill="none" id="Intervention-backto-Service" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="733.968,858.976,734.8876,864.6711,740.4983,866.0127,739.5787,860.3176,733.968,858.976" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[abc7dc0627f78551ca2688d2e53e79d6]
reverse link Intervention to processState--><path codeLine="219" d="M589.264,869.328 C583.208,912.4 577.136,955.536 573.2,983.512 " fill="none" id="Intervention-backto-processState" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="590.72,858.976,586.8814,863.2824,589.3801,868.482,593.2187,864.1757,590.72,858.976" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[403a0b419d4ed172655f60d4279e60e9]
reverse link Intervention to Date--><path codeLine="220" d="M437.16,865.584 C416.016,882.848 394.776,900.192 374.64,916.632 " fill="none" id="Intervention-backto-Date" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#FFFFFF" points="445.256,858.976,439.5143,859.5349,437.8218,865.0499,443.5635,864.491,445.256,858.976" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[e25c82b72ac52000f19042cdb983f1ae]
reverse link Intervention to Duration--><path codeLine="221" d="M652.664,869.264 C667.232,947.92 669.584,1043.392 622.4,1114.4 C599.416,1148.992 561.096,1170.984 522.496,1184.96 " fill="none" id="Intervention-backto-Duration" style="stroke: #000000; stroke-width: 0.8;"/><polygon fill="#000000" points="650.688,859.016,648.4593,864.337,652.5139,868.4408,654.7425,863.1198,650.688,859.016" style="stroke: #000000; stroke-width: 0.8;"/><!--MD5=[3f5e16d20d037f2edde71c52c16360df]
@startuml
!define LIGHTORANGE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void usernameMapChanger(std::string id, std::string newUsername)
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + void changeUsername(HouseMaster &hm, std::string newUsername)
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(const std::string &service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 Date <|- - Duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - Date
 Intervention *- - Duration
@enduml

@startuml










skinparam stereotypeCBackgroundColor FF8800

skinparam backgroundColor fff








skinparam circledCharacter {
  radius 8
  fontSize 11
  fontName Verdana
}

skinparam class {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  attributeFontColor 333
  attributeFontSize 11
  attributeIconSize 11
}


skinparam actor {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam participant {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam collections {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam SequenceBox{
    backgroundColor e0e0e0
  borderColor cccccc
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam interface {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam component {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam node {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam database {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam queue {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam usecase {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam activity {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam sequence {
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  lifeLineBorderColor FF8800
  lifeLineBackgroundColor e0e0e0
}

skinparam boundary {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam control {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam entity {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam state {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
  startColor FF8800
  endColor BB6600
}


skinparam object {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}


skinparam note {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam cloud {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam rectangle {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam storage {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void usernameMapChanger(std::string id, std::string newUsername)
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + void changeUsername(HouseMaster &hm, std::string newUsername)
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(const std::string &service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 Date <|- - Duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - Date
 Intervention *- - Duration
@enduml

PlantUML version 1.2020.19(Mon Oct 12 16:10:01 WEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: pt
Country: PT
--></g></svg>