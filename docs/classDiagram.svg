<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1470px" preserveAspectRatio="none" style="width:3345px;height:1470px;" version="1.1" viewBox="0 0 3345 1470" width="3345px" zoomAndPan="magnify"><defs><filter height="300%" id="f8m3zj6cin5b1" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[d694de1a4d3eb4abf36fc4a4dacd5966]
class processState--><rect codeLine="4" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="80.4141" id="processState" style="stroke: #AAAAAA; stroke-width: 1.5;" width="99" x="342" y="1184.5"/><ellipse cx="354" cy="1197.5" fill="#EB937F" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M351.0156,1193.5 L356.5938,1193.5 L356.5938,1195.0156 L353.0781,1195.0156 L353.0781,1196.5 L356.375,1196.5 L356.375,1198.0313 L353.0781,1198.0313 L353.0781,1199.9844 L356.7031,1199.9844 L356.7031,1201.5 L351.0156,1201.5 L351.0156,1193.5 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="365" y="1201.3081">processState</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="343" x2="440" y1="1210.5" y2="1210.5"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="39" x="348" y="1224.7104">Active,</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="348" y="1237.5151">Complete,</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="348" y="1250.3198">Canceled</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="343" x2="440" y1="1256.9141" y2="1256.9141"/><!--MD5=[090baa0da4ff03e6b68a244d81271cc4]
class classification--><rect codeLine="11" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="131.6328" id="classification" style="stroke: #AAAAAA; stroke-width: 1.5;" width="108" x="2043.5" y="1158.5"/><ellipse cx="2060" cy="1171.5" fill="#EB937F" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M2057.0156,1167.5 L2062.5938,1167.5 L2062.5938,1169.0156 L2059.0781,1169.0156 L2059.0781,1170.5 L2062.375,1170.5 L2062.375,1172.0313 L2059.0781,1172.0313 L2059.0781,1173.9844 L2062.7031,1173.9844 L2062.7031,1175.5 L2057.0156,1175.5 L2057.0156,1167.5 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2072" y="1175.3081">classification</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="2044.5" x2="2150.5" y1="1184.5" y2="1184.5"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="2049.5" y="1198.7104">unreliable = -2</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2049.5" y="1211.5151">clumsy = -1</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2049.5" y="1224.3198">newHere = 0</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="2049.5" y="1237.1245">getsItDone = 1</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2049.5" y="1249.9292">hardWorking = 2</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2049.5" y="1262.7339">attentive = 3</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2049.5" y="1275.5386">savior = 4</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="2044.5" x2="2150.5" y1="1282.1328" y2="1282.1328"/><!--MD5=[7829b64950ce38e0487c4015ea331f97]
class Date--><rect codeLine="21" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="246.875" id="Date" style="stroke: #AAAAAA; stroke-width: 1.5;" width="618" x="2364.5" y="205.5"/><ellipse cx="2657" cy="218.5" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M2659.875,221.9219 Q2659.2969,222.2031 2658.6719,222.3594 Q2658.0625,222.5 2657.3906,222.5 Q2655.3906,222.5 2654.2188,221.4219 Q2653.0469,220.3438 2653.0469,218.5 Q2653.0469,216.6406 2654.2188,215.5781 Q2655.3906,214.5 2657.3906,214.5 Q2658.0625,214.5 2658.6719,214.6563 Q2659.2969,214.7969 2659.875,215.0781 L2659.875,216.6719 Q2659.2969,216.3125 2658.7344,216.1406 Q2658.1719,215.9531 2657.5625,215.9531 Q2656.4531,215.9531 2655.8125,216.6406 Q2655.1875,217.3125 2655.1875,218.5 Q2655.1875,219.6875 2655.8125,220.3594 Q2656.4531,221.0313 2657.5625,221.0313 Q2658.1719,221.0313 2658.7344,220.8594 Q2659.2969,220.6719 2659.875,220.3125 L2659.875,221.9219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="2673" y="222.3081">Date</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="2365.5" x2="2981.5" y1="231.5" y2="231.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2372.5" y="239.5"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2381.5" y="245.7104">unsigned int _day{};</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2372.5" y="252.3047"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="2381.5" y="258.5151">unsigned int _month{};</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2372.5" y="265.1094"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="2381.5" y="271.3198">unsigned int _year{};</text><polygon fill="none" points="2375.5,275.9141,2379.5,279.9141,2375.5,283.9141,2371.5,279.9141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2381.5" y="284.1245">unsigned int _hours</text><polygon fill="none" points="2375.5,288.7188,2379.5,292.7188,2375.5,296.7188,2371.5,292.7188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2381.5" y="296.9292">unsigned int _minutes</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="2365.5" x2="2981.5" y1="303.5234" y2="303.5234"/><ellipse cx="2375.5" cy="314.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="2381.5" y="317.7339">Date();</text><ellipse cx="2375.5" cy="327.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="595" x="2381.5" y="330.5386">Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);</text><ellipse cx="2375.5" cy="340.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="2381.5" y="343.3433">explicit Date(const std::string &amp;date);</text><ellipse cx="2375.5" cy="352.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="2381.5" y="356.1479">std::string getString() const;</text><ellipse cx="2375.5" cy="365.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="2381.5" y="368.9526">Date operator+(const Date &amp;d1) const;</text><ellipse cx="2375.5" cy="378.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="2381.5" y="381.7573">bool operator==(const Date &amp;d2) const;</text><ellipse cx="2375.5" cy="391.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="2381.5" y="394.562">bool operator&lt;(const Date &amp;d2) const;</text><ellipse cx="2375.5" cy="404.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="2381.5" y="407.3667">bool operator&gt;(const Date &amp;d2) const;</text><ellipse cx="2375.5" cy="416.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="141" x="2381.5" y="420.1714">void checkIfValid() const;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2372.5" y="426.7656"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2381.5" y="432.9761">bool isLeapYear() const;</text><ellipse cx="2375.5" cy="442.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2381.5" y="445.7808">class InvalidDate;</text><!--MD5=[e7713a66b67445a0eb297b7e73c442e5]
class Duration--><rect codeLine="41" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="118.8281" id="Duration" style="stroke: #AAAAAA; stroke-width: 1.5;" width="314" x="3017.5" y="269.5"/><ellipse cx="3147" cy="282.5" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M3149.875,285.9219 Q3149.2969,286.2031 3148.6719,286.3594 Q3148.0625,286.5 3147.3906,286.5 Q3145.3906,286.5 3144.2188,285.4219 Q3143.0469,284.3438 3143.0469,282.5 Q3143.0469,280.6406 3144.2188,279.5781 Q3145.3906,278.5 3147.3906,278.5 Q3148.0625,278.5 3148.6719,278.6563 Q3149.2969,278.7969 3149.875,279.0781 L3149.875,280.6719 Q3149.2969,280.3125 3148.7344,280.1406 Q3148.1719,279.9531 3147.5625,279.9531 Q3146.4531,279.9531 3145.8125,280.6406 Q3145.1875,281.3125 3145.1875,282.5 Q3145.1875,283.6875 3145.8125,284.3594 Q3146.4531,285.0313 3147.5625,285.0313 Q3148.1719,285.0313 3148.7344,284.8594 Q3149.2969,284.6719 3149.875,284.3125 L3149.875,285.9219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="48" x="3163" y="286.3081">Duration</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="3018.5" x2="3330.5" y1="295.5" y2="295.5"/><ellipse cx="3028.5" cy="306.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3034.5" y="309.7104">class InvalidDuration;</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="3018.5" x2="3330.5" y1="316.3047" y2="316.3047"/><ellipse cx="3028.5" cy="327.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="3034.5" y="330.5151">Duration();</text><ellipse cx="3028.5" cy="340.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="3034.5" y="343.3198">Duration(unsigned int hours, unsigned int minutes);</text><ellipse cx="3028.5" cy="352.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="3034.5" y="356.1245">explicit Duration(const std::string &amp;duration);</text><ellipse cx="3028.5" cy="365.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="210" x="3034.5" y="368.9292">std::string getString() const override;</text><ellipse cx="3028.5" cy="378.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="193" x="3034.5" y="381.7339">void checkIfValid() const override;</text><!--MD5=[dbb8b4f13c7b21394f9d757e58732f45]
class Service--><rect codeLine="50" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="182.8516" id="Service" style="stroke: #AAAAAA; stroke-width: 1.5;" width="462" x="562.5" y="1133"/><ellipse cx="769" cy="1146" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M771.875,1149.4219 Q771.2969,1149.7031 770.6719,1149.8594 Q770.0625,1150 769.3906,1150 Q767.3906,1150 766.2188,1148.9219 Q765.0469,1147.8438 765.0469,1146 Q765.0469,1144.1406 766.2188,1143.0781 Q767.3906,1142 769.3906,1142 Q770.0625,1142 770.6719,1142.1563 Q771.2969,1142.2969 771.875,1142.5781 L771.875,1144.1719 Q771.2969,1143.8125 770.7344,1143.6406 Q770.1719,1143.4531 769.5625,1143.4531 Q768.4531,1143.4531 767.8125,1144.1406 Q767.1875,1144.8125 767.1875,1146 Q767.1875,1147.1875 767.8125,1147.8594 Q768.4531,1148.5313 769.5625,1148.5313 Q770.1719,1148.5313 770.7344,1148.3594 Q771.2969,1148.1719 771.875,1147.8125 L771.875,1149.4219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="785" y="1149.8081">Service</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="563.5" x2="1023.5" y1="1159" y2="1159"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="570.5" y="1167"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="579.5" y="1173.2104">std::string _name</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="570.5" y="1179.8047"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="579.5" y="1186.0151">bool _pro</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="570.5" y="1192.6094"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="579.5" y="1198.8198">float _basePrice</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="570.5" y="1205.4141"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="579.5" y="1211.6245">duration _duration</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="563.5" x2="1023.5" y1="1218.2188" y2="1218.2188"/><ellipse cx="573.5" cy="1229.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="579.5" y="1232.4292">Service()</text><ellipse cx="573.5" cy="1242.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="439" x="579.5" y="1245.2339">Service(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="573.5" cy="1254.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="579.5" y="1258.0386">std::string getName() const</text><ellipse cx="573.5" cy="1267.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="579.5" y="1270.8433">bool getPro() const</text><ellipse cx="573.5" cy="1280.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="579.5" y="1283.6479">float getBasePrice() const</text><ellipse cx="573.5" cy="1293.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="579.5" y="1296.4526">duration getDuration() const</text><ellipse cx="573.5" cy="1306.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="83" x="579.5" y="1309.2573">float getPrice()</text><!--MD5=[ccb6b53f2b3136c820d7801ae6f29901]
class Painting--><rect codeLine="65" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="80.4141" id="Painting" style="stroke: #AAAAAA; stroke-width: 1.5;" width="465" x="561" y="1376"/><ellipse cx="767.5" cy="1389" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M770.375,1392.4219 Q769.7969,1392.7031 769.1719,1392.8594 Q768.5625,1393 767.8906,1393 Q765.8906,1393 764.7188,1391.9219 Q763.5469,1390.8438 763.5469,1389 Q763.5469,1387.1406 764.7188,1386.0781 Q765.8906,1385 767.8906,1385 Q768.5625,1385 769.1719,1385.1563 Q769.7969,1385.2969 770.375,1385.5781 L770.375,1387.1719 Q769.7969,1386.8125 769.2344,1386.6406 Q768.6719,1386.4531 768.0625,1386.4531 Q766.9531,1386.4531 766.3125,1387.1406 Q765.6875,1387.8125 765.6875,1389 Q765.6875,1390.1875 766.3125,1390.8594 Q766.9531,1391.5313 768.0625,1391.5313 Q768.6719,1391.5313 769.2344,1391.3594 Q769.7969,1391.1719 770.375,1390.8125 L770.375,1392.4219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="783.5" y="1392.8081">Painting</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="562" x2="1025" y1="1402" y2="1402"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="569" y="1410"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="578" y="1416.2104">unsigned int _roomNumber</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="562" x2="1025" y1="1422.8047" y2="1422.8047"/><ellipse cx="572" cy="1433.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="442" x="578" y="1437.0151">Painting(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="572" cy="1446.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="135" x="578" y="1449.8198">float getPrice() override</text><!--MD5=[34fc254bc528b6b0fa50d673940a681f]
class HouseMaster--><rect codeLine="72" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="643.8203" id="HouseMaster" style="stroke: #AAAAAA; stroke-width: 1.5;" width="873" x="883" y="7"/><ellipse cx="1279.5" cy="20" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M1282.375,23.4219 Q1281.7969,23.7031 1281.1719,23.8594 Q1280.5625,24 1279.8906,24 Q1277.8906,24 1276.7188,22.9219 Q1275.5469,21.8438 1275.5469,20 Q1275.5469,18.1406 1276.7188,17.0781 Q1277.8906,16 1279.8906,16 Q1280.5625,16 1281.1719,16.1563 Q1281.7969,16.2969 1282.375,16.5781 L1282.375,18.1719 Q1281.7969,17.8125 1281.2344,17.6406 Q1280.6719,17.4531 1280.0625,17.4531 Q1278.9531,17.4531 1278.3125,18.1406 Q1277.6875,18.8125 1277.6875,20 Q1277.6875,21.1875 1278.3125,21.8594 Q1278.9531,22.5313 1280.0625,22.5313 Q1280.6719,22.5313 1281.2344,22.3594 Q1281.7969,22.1719 1282.375,21.8125 L1282.375,23.4219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1295.5" y="23.8081">HouseMaster</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="884" x2="1755" y1="33" y2="33"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="889" y="47.2104">std::unordered_map&lt;std::string, Service *&gt; _availableServices</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="889" y="60.0151">std::map&lt;std::string, Client *&gt; _clients</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="889" y="72.8198">std::unordered_map&lt;std::string, std::string&gt; _usernameMap</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="889" y="85.6245">std::map&lt;std::string, Collaborator *&gt; _collaborators</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="889" y="98.4292">std::unordered_set&lt;Intervention *&gt; _interventions</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="889" y="111.2339">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="884" x2="1755" y1="117.8281" y2="117.8281"/><ellipse cx="894" cy="128.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="900" y="132.0386">HouseMaster()</text><ellipse cx="894" cy="141.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="738" x="900" y="144.8433">HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)</text><ellipse cx="894" cy="154.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="900" y="157.6479">~HouseMaster() = default</text><ellipse cx="894" cy="167.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="900" y="170.4526">std::map&lt;std::string, Collaborator *&gt; &amp;getCollaborators()</text><ellipse cx="894" cy="180.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="900" y="183.2573">std::map&lt;std::string, Client *&gt; &amp;getClients()</text><ellipse cx="894" cy="192.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="900" y="196.062">std::unordered_set&lt;Intervention *&gt; &amp; getInterventions()</text><ellipse cx="894" cy="205.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="900" y="208.8667">void addAvailableService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><ellipse cx="894" cy="218.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="900" y="221.6714">void removeAvailableService(const std::string &amp;service)</text><ellipse cx="894" cy="231.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="900" y="234.4761">std::unordered_map&lt;std::string, Service *&gt; &amp;getAvailableServices()</text><ellipse cx="894" cy="244.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="900" y="247.2808">void removeCollaborator(const std::string &amp;collId)</text><ellipse cx="894" cy="256.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="850" x="900" y="260.0854">void addCollaborator(const std::vector&lt;std::string&gt; &amp;services, const std::string &amp;name, bool pro, float earnings = 0, Classification score = newHere)</text><ellipse cx="894" cy="269.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="417" x="900" y="272.8901">void addClient(unsigned long nif, const std::string &amp;name, bool premium)</text><ellipse cx="894" cy="282.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="900" y="285.6948">void removeClient(const std::string &amp;clientId)</text><ellipse cx="894" cy="295.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="836" x="900" y="298.4995">Intervention * addIntervention(const Date &amp;start, const std::string &amp;service, bool forcePro, const std::string &amp;clientId, unsigned int nrOfRooms = 0)</text><ellipse cx="894" cy="308.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="433" x="900" y="311.3042">void changeInterventionState(Intervention *intervention, processState state)</text><ellipse cx="894" cy="320.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="900" y="324.1089">void processTransaction(Intervention *intervention)</text><ellipse cx="894" cy="333.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="900" y="336.9136">std::vector&lt;Intervention *&gt; getAssociatedInterventions(const std::string &amp;id)</text><ellipse cx="894" cy="346.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="471" x="900" y="349.7183">std::vector&lt;Intervention *&gt; getAssociatedActiveInterventions(const std::string &amp;id)</text><ellipse cx="894" cy="359.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="460" x="900" y="362.5229">std::vector&lt;Intervention *&gt; getAssociatedPastInterventions(const std::string &amp;id)</text><ellipse cx="894" cy="372.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="900" y="375.3276">std::vector&lt;Intervention *&gt; getAllPastInterventions()</text><ellipse cx="894" cy="384.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="900" y="388.1323">std::vector&lt;Intervention *&gt; getAllActiveInterventions()</text><ellipse cx="894" cy="397.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="718" x="900" y="400.937">void assignCollaborator(Intervention *intervention, const std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; &amp;orderedCollabs)</text><ellipse cx="894" cy="410.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="900" y="413.7417">std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; sortCollaboratorsByScore()</text><ellipse cx="894" cy="423.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="900" y="426.5464">Individual *findByUsername(const std::string &amp;name)</text><ellipse cx="894" cy="436.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="279" x="900" y="439.3511">void markAsComplete(Intervention *intervention)</text><ellipse cx="894" cy="448.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="900" y="452.1558">float getEarnings() const</text><ellipse cx="894" cy="461.75" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="900" y="464.9604">class UnavailableAppointment</text><ellipse cx="894" cy="474.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="900" y="477.7651">class NonexistentService</text><ellipse cx="894" cy="487.3594" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="900" y="490.5698">class ExistentService</text><ellipse cx="894" cy="500.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="900" y="503.3745">class NonexistentCollab</text><ellipse cx="894" cy="512.9688" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="900" y="516.1792">class AssignedCollab</text><ellipse cx="894" cy="525.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="900" y="528.9839">class NonexistentClient</text><ellipse cx="894" cy="538.5781" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="900" y="541.7886">class ExistentClient</text><ellipse cx="894" cy="551.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="900" y="554.5933">class NonexistentUsername</text><ellipse cx="894" cy="564.1875" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="900" y="567.3979">class UnableToWriteFile</text><ellipse cx="894" cy="576.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="900" y="580.2026">void writeCollabsInfo()</text><ellipse cx="894" cy="589.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="900" y="593.0073">void writeClientsInfo()</text><ellipse cx="894" cy="602.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="900" y="605.812">void writeServicesInfo()</text><ellipse cx="894" cy="615.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="900" y="618.6167">void writeInterventionsInfo()</text><ellipse cx="894" cy="628.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="900" y="631.4214">void writeFinancialInfo() const</text><ellipse cx="894" cy="641.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="612" x="900" y="644.2261">void addAvailablePaintService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><!--MD5=[91506c20fa69d22eac57944020c826c2]
class Intervention--><rect codeLine="123" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="336.5078" id="Intervention" style="stroke: #AAAAAA; stroke-width: 1.5;" width="879" x="7" y="723.5"/><ellipse cx="409" cy="736.5" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M411.875,739.9219 Q411.2969,740.2031 410.6719,740.3594 Q410.0625,740.5 409.3906,740.5 Q407.3906,740.5 406.2188,739.4219 Q405.0469,738.3438 405.0469,736.5 Q405.0469,734.6406 406.2188,733.5781 Q407.3906,732.5 409.3906,732.5 Q410.0625,732.5 410.6719,732.6563 Q411.2969,732.7969 411.875,733.0781 L411.875,734.6719 Q411.2969,734.3125 410.7344,734.1406 Q410.1719,733.9531 409.5625,733.9531 Q408.4531,733.9531 407.8125,734.6406 Q407.1875,735.3125 407.1875,736.5 Q407.1875,737.6875 407.8125,738.3594 Q408.4531,739.0313 409.5625,739.0313 Q410.1719,739.0313 410.7344,738.8594 Q411.2969,738.6719 411.875,738.3125 L411.875,739.9219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="425" y="740.3081">Intervention</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="8" x2="885" y1="749.5" y2="749.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="757.5"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="24" y="763.7104">std::string _clientId</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="770.3047"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="24" y="776.5151">std::string _collabId</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="783.1094"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="24" y="789.3198">Date _startingTime</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="795.9141"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="24" y="802.1245">Service* _type</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="808.7188"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="24" y="814.9292">bool forcePro</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="821.5234"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="24" y="827.7339">processState _state</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15" y="834.3281"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="24" y="840.5386">float _cost</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="8" x2="885" y1="847.1328" y2="847.1328"/><ellipse cx="18" cy="858.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="856" x="24" y="861.3433">Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)</text><ellipse cx="18" cy="870.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="24" y="874.1479">~Intervention()</text><ellipse cx="18" cy="883.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="24" y="886.9526">Date getStartingTime() const</text><ellipse cx="18" cy="896.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="24" y="899.7573">Service * getService() const</text><ellipse cx="18" cy="909.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="24" y="912.562">bool getForcePro() const</text><ellipse cx="18" cy="922.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="24" y="925.3667">std::string getCollabId() const</text><ellipse cx="18" cy="934.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="24" y="938.1714">std::string getClientId() const</text><ellipse cx="18" cy="947.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="24" y="950.9761">void setCollabId(const std::string &amp;collabId)</text><ellipse cx="18" cy="960.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="24" y="963.7808">void setClientId(const std::string &amp;clientId)</text><ellipse cx="18" cy="973.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="24" y="976.5854">processState getProcessState()</text><ellipse cx="18" cy="986.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="24" y="989.3901">void setProcessState(processState state)</text><ellipse cx="18" cy="998.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="24" y="1002.1948">bool conflictsWith(const Date &amp;start, const Duration &amp;duration) const</text><ellipse cx="18" cy="1011.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="24" y="1014.9995">void calculateCost()</text><ellipse cx="18" cy="1024.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="24" y="1027.8042">float getCost() const</text><ellipse cx="18" cy="1037.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="24" y="1040.6089">Date getEndTime() const</text><ellipse cx="18" cy="1050.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="24" y="1053.4136">bool isActive() const</text><!--MD5=[3ada0b1ccda01f6af47785107eed7eb1]
class Individual--><rect codeLine="150" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="144.4375" id="Individual" style="stroke: #AAAAAA; stroke-width: 1.5;" width="514" x="1815.5" y="257"/><ellipse cx="2042" cy="270" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M2044.875,273.4219 Q2044.2969,273.7031 2043.6719,273.8594 Q2043.0625,274 2042.3906,274 Q2040.3906,274 2039.2188,272.9219 Q2038.0469,271.8438 2038.0469,270 Q2038.0469,268.1406 2039.2188,267.0781 Q2040.3906,266 2042.3906,266 Q2043.0625,266 2043.6719,266.1563 Q2044.2969,266.2969 2044.875,266.5781 L2044.875,268.1719 Q2044.2969,267.8125 2043.7344,267.6406 Q2043.1719,267.4531 2042.5625,267.4531 Q2041.4531,267.4531 2040.8125,268.1406 Q2040.1875,268.8125 2040.1875,270 Q2040.1875,271.1875 2040.8125,271.8594 Q2041.4531,272.5313 2042.5625,272.5313 Q2043.1719,272.5313 2043.7344,272.3594 Q2044.2969,272.1719 2044.875,271.8125 L2044.875,273.4219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="54" x="2058" y="273.8081">Individual</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="1816.5" x2="2328.5" y1="283" y2="283"/><polygon fill="none" points="1826.5,289,1830.5,293,1826.5,297,1822.5,293" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="1832.5" y="297.2104">std::string _displayName</text><polygon fill="none" points="1826.5,301.8047,1830.5,305.8047,1826.5,309.8047,1822.5,305.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1832.5" y="310.0151">unsigned int _id</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="1816.5" x2="2328.5" y1="316.6094" y2="316.6094"/><ellipse cx="1826.5" cy="327.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="1832.5" y="330.8198">Individual()</text><ellipse cx="1826.5" cy="340.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1832.5" y="343.6245">explicit Individual(std::string name)</text><ellipse cx="1826.5" cy="353.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="1832.5" y="356.4292">std::string getId() const</text><ellipse cx="1826.5" cy="366.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="1832.5" y="369.2339">std::vector&lt;Intervention*&gt;getAssociatedInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1826.5" cy="378.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="1832.5" y="382.0386">std::vector&lt;Intervention*&gt; getAssociatedActiveInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1826.5" cy="391.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1832.5" y="394.8433">std::string getName() const</text><!--MD5=[f483d6e5de34a60207b28a5563be5e8b]
class Collaborator--><rect codeLine="162" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="362.1172" id="Collaborator" style="stroke: #AAAAAA; stroke-width: 1.5;" width="690" x="1752.5" y="711"/><ellipse cx="2059" cy="724" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M2061.875,727.4219 Q2061.2969,727.7031 2060.6719,727.8594 Q2060.0625,728 2059.3906,728 Q2057.3906,728 2056.2188,726.9219 Q2055.0469,725.8438 2055.0469,724 Q2055.0469,722.1406 2056.2188,721.0781 Q2057.3906,720 2059.3906,720 Q2060.0625,720 2060.6719,720.1563 Q2061.2969,720.2969 2061.875,720.5781 L2061.875,722.1719 Q2061.2969,721.8125 2060.7344,721.6406 Q2060.1719,721.4531 2059.5625,721.4531 Q2058.4531,721.4531 2057.8125,722.1406 Q2057.1875,722.8125 2057.1875,724 Q2057.1875,725.1875 2057.8125,725.8594 Q2058.4531,726.5313 2059.5625,726.5313 Q2060.1719,726.5313 2060.7344,726.3594 Q2061.2969,726.1719 2061.875,725.8125 L2061.875,727.4219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2075" y="727.8081">Collaborator</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="1753.5" x2="2441.5" y1="737" y2="737"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1760.5" y="745"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="1769.5" y="751.2104">std::vector&lt;Classification&gt; _classifications</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1760.5" y="757.8047"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1769.5" y="764.0151">std::vector&lt;std::string&gt; _services</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1760.5" y="770.6094"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1769.5" y="776.8198">Classification _score</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1760.5" y="783.4141"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="1769.5" y="789.6245">bool _pro</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1760.5" y="796.2188"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="1769.5" y="802.4292">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="1753.5" x2="2441.5" y1="809.0234" y2="809.0234"/><ellipse cx="1763.5" cy="820.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="667" x="1769.5" y="823.2339">Collaborator(std::vector&lt;std::string&gt; services, const std::string &amp;name, bool pro, float earnings, Classification score)</text><ellipse cx="1763.5" cy="832.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1769.5" y="836.0386">~Collaborator() override</text><ellipse cx="1763.5" cy="845.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="1769.5" y="848.8433">std::vector&lt;std::string&gt; getServices()</text><ellipse cx="1763.5" cy="858.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1769.5" y="861.6479">bool isPro() const</text><ellipse cx="1763.5" cy="871.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="1769.5" y="874.4526">bool canPreform(const std::string &amp;service)</text><ellipse cx="1763.5" cy="884.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="527" x="1769.5" y="887.2573">bool isAvailable(HouseMaster &amp;hm, const std::string &amp;collabId, Date start, Duration duration)</text><ellipse cx="1763.5" cy="896.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="1769.5" y="900.062">bool hasQualificationToPreform(Intervention *intervention) const</text><ellipse cx="1763.5" cy="909.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="484" x="1769.5" y="912.8667">bool canDo(HouseMaster &amp;hm, const std::string &amp;collabId, Intervention *intervention)</text><ellipse cx="1763.5" cy="922.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="1769.5" y="925.6714">int getScore() const</text><ellipse cx="1763.5" cy="935.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="1769.5" y="938.4761">void addClassification(Classification classification)</text><ellipse cx="1763.5" cy="948.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1769.5" y="951.2808">void addService(const std::string &amp;service)</text><ellipse cx="1763.5" cy="960.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="347" x="1769.5" y="964.0854">void markInterventionAsComplete(Intervention *intervention)</text><ellipse cx="1763.5" cy="973.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="1769.5" y="976.8901">void updateScore()</text><ellipse cx="1763.5" cy="986.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1769.5" y="989.6948">void calculateEarnings(float &amp;hmEarnings)</text><ellipse cx="1763.5" cy="999.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1769.5" y="1002.4995">float getEarnings() const</text><ellipse cx="1763.5" cy="1012.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="1769.5" y="1015.3042">float commissionByScore()</text><ellipse cx="1763.5" cy="1024.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="128" x="1769.5" y="1028.1089">unsigned int _idSeqCol</text><ellipse cx="1763.5" cy="1037.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="183" x="1769.5" y="1040.9136">std::string getId() const override</text><ellipse cx="1763.5" cy="1050.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="1769.5" y="1053.7183">bool operator==(const Collaborator &amp;ind2) const</text><ellipse cx="1763.5" cy="1063.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="1769.5" y="1066.5229">bool operator&lt;(const Collaborator &amp;col2) const</text><!--MD5=[ed6624c6556d5e7b1bd23032162d20b7]
class Client--><rect codeLine="191" fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="195.6563" id="Client" style="stroke: #AAAAAA; stroke-width: 1.5;" width="796" x="921.5" y="794"/><ellipse cx="1300" cy="807" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M1302.875,810.4219 Q1302.2969,810.7031 1301.6719,810.8594 Q1301.0625,811 1300.3906,811 Q1298.3906,811 1297.2188,809.9219 Q1296.0469,808.8438 1296.0469,807 Q1296.0469,805.1406 1297.2188,804.0781 Q1298.3906,803 1300.3906,803 Q1301.0625,803 1301.6719,803.1563 Q1302.2969,803.2969 1302.875,803.5781 L1302.875,805.1719 Q1302.2969,804.8125 1301.7344,804.6406 Q1301.1719,804.4531 1300.5625,804.4531 Q1299.4531,804.4531 1298.8125,805.1406 Q1298.1875,805.8125 1298.1875,807 Q1298.1875,808.1875 1298.8125,808.8594 Q1299.4531,809.5313 1300.5625,809.5313 Q1301.1719,809.5313 1301.7344,809.3594 Q1302.2969,809.1719 1302.875,808.8125 L1302.875,810.4219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="32" x="1316" y="810.8081">Client</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="922.5" x2="1716.5" y1="820" y2="820"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="929.5" y="828"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="938.5" y="834.2104">unsigned int _nif</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="929.5" y="840.8047"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="938.5" y="847.0151">bool _premium</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="922.5" x2="1716.5" y1="853.6094" y2="853.6094"/><ellipse cx="932.5" cy="864.6094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="125" x="938.5" y="867.8198">unsigned int _idSeqClt</text><ellipse cx="932.5" cy="877.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="938.5" y="880.6245">Client(unsigned int nif, const std::string &amp;name, bool premium)</text><ellipse cx="932.5" cy="890.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="938.5" y="893.4292">~Client() override = default</text><ellipse cx="932.5" cy="903.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="938.5" y="906.2339">unsigned int getNif()</text><ellipse cx="932.5" cy="915.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="938.5" y="919.0386">bool isPremium() const</text><ellipse cx="932.5" cy="928.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="183" x="938.5" y="931.8433">std::string getId() const override</text><ellipse cx="932.5" cy="941.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="773" x="938.5" y="944.6479">void requestIntervention(HouseMaster &amp;hm, const Date &amp;date, const std::string &amp;service, bool forcePro, unsigned int nrOfRooms) const</text><ellipse cx="932.5" cy="954.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="286" x="938.5" y="957.4526">void cancelIntervention(Intervention *intervention)</text><ellipse cx="932.5" cy="967.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="565" x="938.5" y="970.2573">void classifyCollaborator(HouseMaster &amp;hm, const std::string &amp;collabId, Classification classification)</text><ellipse cx="932.5" cy="979.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="938.5" y="983.062">bool operator==(const Client &amp;ind2) const</text><!--MD5=[795a4aacf1bde433470b0e5b01d3050a]
class date--><rect fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="42" id="date" style="stroke: #AAAAAA; stroke-width: 1.5;" width="51" x="476" y="1203.5"/><ellipse cx="488" cy="1216.5" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M490.875,1219.9219 Q490.2969,1220.2031 489.6719,1220.3594 Q489.0625,1220.5 488.3906,1220.5 Q486.3906,1220.5 485.2188,1219.4219 Q484.0469,1218.3438 484.0469,1216.5 Q484.0469,1214.6406 485.2188,1213.5781 Q486.3906,1212.5 488.3906,1212.5 Q489.0625,1212.5 489.6719,1212.6563 Q490.2969,1212.7969 490.875,1213.0781 L490.875,1214.6719 Q490.2969,1214.3125 489.7344,1214.1406 Q489.1719,1213.9531 488.5625,1213.9531 Q487.4531,1213.9531 486.8125,1214.6406 Q486.1875,1215.3125 486.1875,1216.5 Q486.1875,1217.6875 486.8125,1218.3594 Q487.4531,1219.0313 488.5625,1219.0313 Q489.1719,1219.0313 489.7344,1218.8594 Q490.2969,1218.6719 490.875,1218.3125 L490.875,1219.9219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="25" x="499" y="1220.3081">date</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="477" x2="526" y1="1229.5" y2="1229.5"/><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="477" x2="526" y1="1237.5" y2="1237.5"/><!--MD5=[90eaa09046263e8c6658c78290042555]
class duration--><rect fill="#CCCCCC" filter="url(#f8m3zj6cin5b1)" height="42" id="duration" style="stroke: #AAAAAA; stroke-width: 1.5;" width="73" x="353" y="1395"/><ellipse cx="365" cy="1408" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M367.875,1411.4219 Q367.2969,1411.7031 366.6719,1411.8594 Q366.0625,1412 365.3906,1412 Q363.3906,1412 362.2188,1410.9219 Q361.0469,1409.8438 361.0469,1408 Q361.0469,1406.1406 362.2188,1405.0781 Q363.3906,1404 365.3906,1404 Q366.0625,1404 366.6719,1404.1563 Q367.2969,1404.2969 367.875,1404.5781 L367.875,1406.1719 Q367.2969,1405.8125 366.7344,1405.6406 Q366.1719,1405.4531 365.5625,1405.4531 Q364.4531,1405.4531 363.8125,1406.1406 Q363.1875,1406.8125 363.1875,1408 Q363.1875,1409.1875 363.8125,1409.8594 Q364.4531,1410.5313 365.5625,1410.5313 Q366.1719,1410.5313 366.7344,1410.3594 Q367.2969,1410.1719 367.875,1409.8125 L367.875,1411.4219 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="47" x="376" y="1411.8081">duration</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="354" x2="425" y1="1421" y2="1421"/><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="354" x2="425" y1="1429" y2="1429"/><!--MD5=[8d1d930e92d69d0f63c31789944ca4f0]
reverse link Individual to Collaborator--><path codeLine="208" d="M2076.56,421.08 C2080.04,499.21 2085.16,614.15 2089.47,710.79 " fill="none" id="Individual-backto-Collaborator" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="2069.56,421.34,2075.67,401.05,2083.55,420.72,2069.56,421.34" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[f2f702391b19b694c366b89ff259a1c9]
reverse link Individual to Client--><path codeLine="209" d="M2005.24,416.96 C1948.64,486.22 1862.83,582.58 1773.5,651 C1701.92,705.82 1616.05,754.78 1538.35,793.95 " fill="none" id="Individual-backto-Client" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1999.9,412.43,2017.92,401.29,2010.78,421.24,1999.9,412.43" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[bfd708e79445d55f06d2a69bba87afd7]
reverse link date to duration--><path codeLine="210" d="M484.79,1264.27 C477.33,1280.56 468.07,1299.51 458.5,1316 C441.98,1344.44 419.77,1375.23 405.07,1394.8 " fill="none" id="date-backto-duration" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="478.5,1261.18,493.02,1245.76,491.29,1266.88,478.5,1261.18" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[9b596b60bea1e93eaea4273809ede9f7]
reverse link Service to Painting--><path codeLine="211" d="M793.5,1336.15 C793.5,1350.21 793.5,1363.8 793.5,1375.61 " fill="none" id="Service-backto-Painting" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="786.5,1336.09,793.5,1316.09,800.5,1336.09,786.5,1336.09" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[f7376124c70693f07b59c98ff50cd4a4]
reverse link HouseMaster to Client--><path codeLine="212" d="M1319.5,664.1 C1319.5,711.36 1319.5,756.52 1319.5,793.92 " fill="none" id="HouseMaster-backto-Client" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1319.5,651.05,1315.5,657.05,1319.5,663.05,1323.5,657.05,1319.5,651.05" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[695a4985b4a856d73a05f6bd0c943d0c]
reverse link HouseMaster to Collaborator--><path codeLine="213" d="M1766.83,652.56 C1794.38,672.43 1821.53,692.01 1847.72,710.89 " fill="none" id="HouseMaster-backto-Collaborator" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1756.26,644.94,1758.7881,651.6934,1765.9944,651.9572,1763.4663,645.2038,1756.26,644.94" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[7d871f9c8add411a0ead6405517479ed]
reverse link HouseMaster to Intervention--><path codeLine="214" d="M871.44,617.93 C815.23,654.05 759.29,690 707.33,723.39 " fill="none" id="HouseMaster-backto-Intervention" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="882.68,610.71,875.4699,610.5913,872.5871,617.2011,879.7973,617.3198,882.68,610.71" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[d193e677350051aed924e61da77287e0]
reverse link Collaborator to classification--><path codeLine="215" d="M2097.5,1086.35 C2097.5,1112.08 2097.5,1136.87 2097.5,1158.14 " fill="none" id="Collaborator-backto-classification" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="2097.5,1073.24,2093.5,1079.24,2097.5,1085.24,2101.5,1079.24,2097.5,1073.24" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[5e74255e6548edae4a1e429487e00874]
reverse link Intervention to Service--><path codeLine="216" d="M632.04,1069.72 C655,1091.58 677.67,1113.18 698.44,1132.96 " fill="none" id="Intervention-backto-Service" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="622.54,1060.67,624.1297,1067.7037,631.2337,1068.9416,629.6441,1061.9079,622.54,1060.67" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[abc7dc0627f78551ca2688d2e53e79d6]
reverse link Intervention to processState--><path codeLine="217" d="M416.43,1073.68 C409.47,1115.52 402.73,1156.02 398.02,1184.34 " fill="none" id="Intervention-backto-processState" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="418.6,1060.67,413.6718,1065.9343,416.6358,1072.5081,421.5639,1067.2438,418.6,1060.67" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[19cc15c6f15d250ef131fff6f0bcead7]
reverse link Intervention to date--><path codeLine="218" d="M476.56,1073.65 C485.28,1126 493.64,1176.28 498.12,1203.21 " fill="none" id="Intervention-backto-date" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="474.4,1060.67,471.4361,1067.2438,476.3642,1072.5081,479.3282,1065.9343,474.4,1060.67" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[f7d0d31f127bf78f22137b2acbf5d716]
reverse link Intervention to duration--><path codeLine="219" d="M343.98,1072.89 C336.07,1092.7 329.3,1112.96 324.5,1133 C305.55,1212.1 301.2,1238.07 324.5,1316 C333.57,1346.34 355.25,1376 371.09,1394.82 " fill="none" id="Intervention-backto-duration" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="349.05,1060.62,343.0639,1064.6408,344.473,1071.7129,350.4591,1067.6921,349.05,1060.62" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[2b8c6d61b25b3d097a3b0941159e86b9]
@startuml
!define LIGHTORANGE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(const std::string &service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 date <|- - duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - date
 Intervention *- - duration
@enduml

@startuml










skinparam stereotypeCBackgroundColor FF8800

skinparam backgroundColor fff








skinparam circledCharacter {
  radius 8
  fontSize 11
  fontName Verdana
}

skinparam class {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  attributeFontColor 333
  attributeFontSize 11
  attributeIconSize 11
}


skinparam actor {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam participant {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam collections {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam SequenceBox{
    backgroundColor e0e0e0
  borderColor cccccc
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam interface {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam component {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam node {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam database {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam queue {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam usecase {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam activity {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam sequence {
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  lifeLineBorderColor FF8800
  lifeLineBackgroundColor e0e0e0
}

skinparam boundary {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam control {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam entity {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam state {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
  startColor FF8800
  endColor BB6600
}


skinparam object {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}


skinparam note {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam cloud {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam rectangle {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam storage {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(const std::string &service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 date <|- - duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - date
 Intervention *- - duration
@enduml

PlantUML version 1.2020.19(Mon Oct 12 16:10:01 WEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: pt
Country: PT
--></g></svg>