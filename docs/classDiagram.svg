<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1631px" preserveAspectRatio="none" style="width:2389px;height:1631px;" version="1.1" viewBox="0 0 2389 1631" width="2389px" zoomAndPan="magnify"><defs><filter height="300%" id="fljts5cfpb90d" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[d694de1a4d3eb4abf36fc4a4dacd5966]
class processState--><rect codeLine="4" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="81.5997" id="processState" style="stroke: #AAAAAA; stroke-width: 1.5;" width="91" x="566.5" y="1264"/><ellipse cx="578.5" cy="1277" fill="#EB937F" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M577.0156,1277.3906 L580.8438,1277.3906 L580.8438,1276 L577.0156,1276 L577.0156,1274.3906 L581.1563,1274.3906 L581.1563,1273 L575.3594,1273 L575.3594,1281 L581.3594,1281 L581.3594,1279.625 L577.0156,1279.625 L577.0156,1277.3906 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="589.5" y="1280.619">processState</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="567.5" x2="656.5" y1="1290" y2="1290"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="33" x="572.5" y="1304.2189">Active,</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="572.5" y="1317.4188">Complete,</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="46" x="572.5" y="1330.6187">Canceled</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="567.5" x2="656.5" y1="1337.5997" y2="1337.5997"/><!--MD5=[090baa0da4ff03e6b68a244d81271cc4]
class classification--><rect codeLine="11" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="134.3993" id="classification" style="stroke: #AAAAAA; stroke-width: 1.5;" width="92" x="2037" y="1238"/><ellipse cx="2050.8" cy="1251" fill="#EB937F" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M2049.3156,1251.3906 L2053.1438,1251.3906 L2053.1438,1250 L2049.3156,1250 L2049.3156,1248.3906 L2053.4563,1248.3906 L2053.4563,1247 L2047.6594,1247 L2047.6594,1255 L2053.6594,1255 L2053.6594,1253.625 L2049.3156,1253.625 L2049.3156,1251.3906 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="2062.2" y="1254.619">classification</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="2038" x2="2128" y1="1264" y2="1264"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2043" y="1278.2189">unreliable = -2</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="2043" y="1291.4188">clumsy = -1</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="2043" y="1304.6187">newHere = 0</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2043" y="1317.8186">getsItDone = 1</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2043" y="1331.0185">hardWorking = 2</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2043" y="1344.2184">attentive = 3</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="48" x="2043" y="1357.4183">savior = 4</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="2038" x2="2128" y1="1364.3993" y2="1364.3993"/><!--MD5=[7829b64950ce38e0487c4015ea331f97]
class Date--><rect codeLine="21" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="256.4984" id="Date" style="stroke: #AAAAAA; stroke-width: 1.5;" width="522" x="9" y="1177"/><ellipse cx="255" cy="1190" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M258.5,1188.75 C258.4375,1188.1094 258.2969,1187.7031 257.9531,1187.2656 C257.3438,1186.4531 256.3438,1186 255.1563,1186 C252.8906,1186 251.4688,1187.6094 251.4688,1190.0156 C251.4688,1192.4219 252.875,1194 255.1094,1194 C257.1094,1194 258.4219,1192.8594 258.5313,1191.125 L256.9219,1191.125 C256.8125,1192.0781 256.1719,1192.625 255.1563,1192.625 C253.875,1192.625 253.125,1191.6563 253.125,1190.0313 C253.125,1188.3906 253.9063,1187.4219 255.2031,1187.4219 C256.1563,1187.4219 256.7031,1187.8438 256.9219,1188.75 L258.5,1188.75 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="23" x="271" y="1193.619">Date</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="10" x2="530" y1="1203" y2="1203"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="17" y="1211"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="26" y="1217.2189">unsigned int _day{};</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="17" y="1224.1999"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="26" y="1230.4188">unsigned int _month{};</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="17" y="1237.3998"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="26" y="1243.6187">unsigned int _year{};</text><polygon fill="none" points="20,1248.5997,24,1252.5997,20,1256.5997,16,1252.5997" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="26" y="1256.8186">unsigned int _hours</text><polygon fill="none" points="20,1261.7996,24,1265.7996,20,1269.7996,16,1265.7996" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="26" y="1270.0185">unsigned int _minutes</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="10" x2="530" y1="1276.9995" y2="1276.9995"/><ellipse cx="20" cy="1287.9995" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="26" y="1291.2184">Date();</text><ellipse cx="20" cy="1301.1994" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="499" x="26" y="1304.4183">Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);</text><ellipse cx="20" cy="1314.3993" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="26" y="1317.6182">explicit Date(const std::string &amp;date);</text><ellipse cx="20" cy="1327.5992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="135" x="26" y="1332.6991">std::string getString() const;</text><ellipse cx="20" cy="1342.4491" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="26" y="1345.668">Date operator+(const Date &amp;d1) const;</text><ellipse cx="20" cy="1355.649" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="26" y="1358.8679">bool operator==(const Date &amp;d2) const;</text><ellipse cx="20" cy="1368.8489" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="26" y="1372.0678">bool operator&lt;(const Date &amp;d2) const;</text><ellipse cx="20" cy="1382.0488" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="26" y="1385.2677">bool operator&gt;(const Date &amp;d2) const;</text><ellipse cx="20" cy="1395.2487" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="123" x="26" y="1400.3486">void checkIfValid() const;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="17" y="1407.0986"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="26" y="1413.3175">bool isLeapYear() const;</text><ellipse cx="20" cy="1423.2985" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="26" y="1426.5174">class InvalidDate;</text><!--MD5=[e7713a66b67445a0eb297b7e73c442e5]
class Duration--><rect codeLine="41" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="124.4994" id="Duration" style="stroke: #AAAAAA; stroke-width: 1.5;" width="269" x="297.5" y="1493"/><ellipse cx="408" cy="1506" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M411.5,1504.75 C411.4375,1504.1094 411.2969,1503.7031 410.9531,1503.2656 C410.3438,1502.4531 409.3438,1502 408.1563,1502 C405.8906,1502 404.4688,1503.6094 404.4688,1506.0156 C404.4688,1508.4219 405.875,1510 408.1094,1510 C410.1094,1510 411.4219,1508.8594 411.5313,1507.125 L409.9219,1507.125 C409.8125,1508.0781 409.1719,1508.625 408.1563,1508.625 C406.875,1508.625 406.125,1507.6563 406.125,1506.0313 C406.125,1504.3906 406.9063,1503.4219 408.2031,1503.4219 C409.1563,1503.4219 409.7031,1503.8438 409.9219,1504.75 L411.5,1504.75 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="41" x="424" y="1509.619">Duration</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="298.5" x2="565.5" y1="1519" y2="1519"/><ellipse cx="308.5" cy="1530" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="314.5" y="1533.2189">class InvalidDuration;</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="298.5" x2="565.5" y1="1540.1999" y2="1540.1999"/><ellipse cx="308.5" cy="1551.1999" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="52" x="314.5" y="1554.4188">Duration();</text><ellipse cx="308.5" cy="1564.3998" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="314.5" y="1567.6187">Duration(unsigned int hours, unsigned int minutes);</text><ellipse cx="308.5" cy="1577.5997" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="314.5" y="1580.8186">explicit Duration(const std::string &amp;duration);</text><ellipse cx="308.5" cy="1590.7996" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="178" x="314.5" y="1595.8995">std::string getString() const override;</text><ellipse cx="308.5" cy="1605.6495" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="166" x="314.5" y="1610.7494">void checkIfValid() const override;</text><!--MD5=[dbb8b4f13c7b21394f9d757e58732f45]
class Service--><rect codeLine="50" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="188.8489" id="Service" style="stroke: #AAAAAA; stroke-width: 1.5;" width="393" x="764.5" y="1210.5"/><ellipse cx="939" cy="1223.5" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M942.5,1222.25 C942.4375,1221.6094 942.2969,1221.2031 941.9531,1220.7656 C941.3438,1219.9531 940.3438,1219.5 939.1563,1219.5 C936.8906,1219.5 935.4688,1221.1094 935.4688,1223.5156 C935.4688,1225.9219 936.875,1227.5 939.1094,1227.5 C941.1094,1227.5 942.4219,1226.3594 942.5313,1224.625 L940.9219,1224.625 C940.8125,1225.5781 940.1719,1226.125 939.1563,1226.125 C937.875,1226.125 937.125,1225.1563 937.125,1223.5313 C937.125,1221.8906 937.9063,1220.9219 939.2031,1220.9219 C940.1563,1220.9219 940.7031,1221.3438 940.9219,1222.25 L942.5,1222.25 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="37" x="955" y="1227.119">Service</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="765.5" x2="1156.5" y1="1236.5" y2="1236.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="772.5" y="1244.5"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="781.5" y="1250.7189">std::string _name</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="772.5" y="1257.6999"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="781.5" y="1263.9188">bool _pro</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="772.5" y="1270.8998"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="781.5" y="1277.1187">float _basePrice</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="772.5" y="1284.0997"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="781.5" y="1290.3186">duration _duration</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="765.5" x2="1156.5" y1="1297.2996" y2="1297.2996"/><ellipse cx="775.5" cy="1308.2996" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="781.5" y="1311.5185">Service()</text><ellipse cx="775.5" cy="1321.4995" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="781.5" y="1324.7184">Service(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="775.5" cy="1334.6994" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="781.5" y="1337.9183">std::string getName() const</text><ellipse cx="775.5" cy="1347.8993" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="781.5" y="1351.1182">bool getPro() const</text><ellipse cx="775.5" cy="1361.0992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="781.5" y="1364.3181">float getBasePrice() const</text><ellipse cx="775.5" cy="1374.2991" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="781.5" y="1377.518">duration getDuration() const</text><ellipse cx="775.5" cy="1387.499" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="71" x="781.5" y="1392.5989">float getPrice()</text><!--MD5=[ccb6b53f2b3136c820d7801ae6f29901]
class Painting--><rect codeLine="65" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="83.2497" id="Painting" style="stroke: #AAAAAA; stroke-width: 1.5;" width="394" x="764" y="1513.5"/><ellipse cx="938.5" cy="1526.5" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M942,1525.25 C941.9375,1524.6094 941.7969,1524.2031 941.4531,1523.7656 C940.8438,1522.9531 939.8438,1522.5 938.6563,1522.5 C936.3906,1522.5 934.9688,1524.1094 934.9688,1526.5156 C934.9688,1528.9219 936.375,1530.5 938.6094,1530.5 C940.6094,1530.5 941.9219,1529.3594 942.0313,1527.625 L940.4219,1527.625 C940.3125,1528.5781 939.6719,1529.125 938.6563,1529.125 C937.375,1529.125 936.625,1528.1563 936.625,1526.5313 C936.625,1524.8906 937.4063,1523.9219 938.7031,1523.9219 C939.6563,1523.9219 940.2031,1524.3438 940.4219,1525.25 L942,1525.25 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="954.5" y="1530.119">Painting</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="765" x2="1157" y1="1539.5" y2="1539.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="772" y="1547.5"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="781" y="1553.7189">unsigned int _roomNumber</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="765" x2="1157" y1="1560.6999" y2="1560.6999"/><ellipse cx="775" cy="1571.6999" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="781" y="1574.9188">Painting(std::string name, bool pro, float basePrice, const duration &amp;duration)</text><ellipse cx="775" cy="1584.8998" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="114" x="781" y="1589.9997">float getPrice() override</text><!--MD5=[34fc254bc528b6b0fa50d673940a681f]
class HouseMaster--><rect codeLine="72" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="675.5953" id="HouseMaster" style="stroke: #AAAAAA; stroke-width: 1.5;" width="737" x="1044.5" y="7"/><ellipse cx="1376.5" cy="20" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M1380,18.75 C1379.9375,18.1094 1379.7969,17.7031 1379.4531,17.2656 C1378.8438,16.4531 1377.8438,16 1376.6563,16 C1374.3906,16 1372.9688,17.6094 1372.9688,20.0156 C1372.9688,22.4219 1374.375,24 1376.6094,24 C1378.6094,24 1379.9219,22.8594 1380.0313,21.125 L1378.4219,21.125 C1378.3125,22.0781 1377.6719,22.625 1376.6563,22.625 C1375.375,22.625 1374.625,21.6563 1374.625,20.0313 C1374.625,18.3906 1375.4063,17.4219 1376.7031,17.4219 C1377.6563,17.4219 1378.2031,17.8438 1378.4219,18.75 L1380,18.75 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="1392.5" y="23.619">HouseMaster</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="1045.5" x2="1780.5" y1="33" y2="33"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="1050.5" y="47.2189">std::unordered_map&lt;std::string, Service *&gt; _availableServices</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1050.5" y="60.4188">std::map&lt;std::string, Client *&gt; _clients</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="1050.5" y="73.6187">std::unordered_map&lt;std::string, std::string&gt; _usernameMap</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1050.5" y="86.8186">std::map&lt;std::string, Collaborator *&gt; _collaborators</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="1050.5" y="100.0185">std::unordered_set&lt;Intervention *&gt; _interventions</text><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1050.5" y="113.2184">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="1045.5" x2="1780.5" y1="120.1994" y2="120.1994"/><ellipse cx="1055.5" cy="131.1994" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="1061.5" y="134.4183">HouseMaster()</text><ellipse cx="1055.5" cy="144.3993" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="624" x="1061.5" y="147.6182">HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)</text><ellipse cx="1055.5" cy="157.5992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1061.5" y="160.8181">~HouseMaster() = default</text><ellipse cx="1055.5" cy="170.7991" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="1061.5" y="174.018">std::map&lt;std::string, Collaborator *&gt; &amp;getCollaborators()</text><ellipse cx="1055.5" cy="183.999" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="1061.5" y="187.2179">std::map&lt;std::string, Client *&gt; &amp;getClients()</text><ellipse cx="1055.5" cy="197.1989" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="1061.5" y="200.4178">std::unordered_set&lt;Intervention *&gt; &amp; getInterventions()</text><ellipse cx="1055.5" cy="210.3988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="1061.5" y="213.6177">void addAvailableService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><ellipse cx="1055.5" cy="223.5987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="1061.5" y="226.8176">void removeAvailableService(const std::string &amp;service)</text><ellipse cx="1055.5" cy="236.7986" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="1061.5" y="240.0175">std::unordered_map&lt;std::string, Service *&gt; &amp;getAvailableServices()</text><ellipse cx="1055.5" cy="249.9985" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="1061.5" y="253.2174">void usernameMapChanger(std::string id, std::string newUsername)</text><ellipse cx="1055.5" cy="263.1984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1061.5" y="266.4173">void removeCollaborator(const std::string &amp;collId)</text><ellipse cx="1055.5" cy="276.3983" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="714" x="1061.5" y="279.6173">void addCollaborator(const std::vector&lt;std::string&gt; &amp;services, const std::string &amp;name, bool pro, float earnings = 0, Classification score = newHere)</text><ellipse cx="1055.5" cy="289.5982" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="1061.5" y="292.8172">void addClient(unsigned long nif, const std::string &amp;name, bool premium)</text><ellipse cx="1055.5" cy="302.7981" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="1061.5" y="306.0171">void removeClient(const std::string &amp;clientId)</text><ellipse cx="1055.5" cy="315.998" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="706" x="1061.5" y="319.217">Intervention * addIntervention(const Date &amp;start, const std::string &amp;service, bool forcePro, const std::string &amp;clientId, unsigned int nrOfRooms = 0)</text><ellipse cx="1055.5" cy="329.1979" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="367" x="1061.5" y="332.4169">void changeInterventionState(Intervention *intervention, processState state)</text><ellipse cx="1055.5" cy="342.3978" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="1061.5" y="345.6168">void processTransaction(Intervention *intervention)</text><ellipse cx="1055.5" cy="355.5977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="1061.5" y="358.8167">std::vector&lt;Intervention *&gt; getAssociatedInterventions(const std::string &amp;id)</text><ellipse cx="1055.5" cy="368.7976" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="397" x="1061.5" y="372.0166">std::vector&lt;Intervention *&gt; getAssociatedActiveInterventions(const std::string &amp;id)</text><ellipse cx="1055.5" cy="381.9975" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="1061.5" y="385.2165">std::vector&lt;Intervention *&gt; getAssociatedPastInterventions(const std::string &amp;id)</text><ellipse cx="1055.5" cy="395.1974" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="1061.5" y="398.4164">std::vector&lt;Intervention *&gt; getAllPastInterventions()</text><ellipse cx="1055.5" cy="408.3973" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1061.5" y="411.6163">std::vector&lt;Intervention *&gt; getAllActiveInterventions()</text><ellipse cx="1055.5" cy="421.5972" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="597" x="1061.5" y="424.8162">void assignCollaborator(Intervention *intervention, const std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; &amp;orderedCollabs)</text><ellipse cx="1055.5" cy="434.7971" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="1061.5" y="438.0161">std::vector&lt;std::pair&lt;std::string, Collaborator *&gt;&gt; sortCollaboratorsByScore()</text><ellipse cx="1055.5" cy="447.997" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="1061.5" y="451.216">Individual *findByUsername(const std::string &amp;name)</text><ellipse cx="1055.5" cy="461.1969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="1061.5" y="464.4159">void markAsComplete(Intervention *intervention)</text><ellipse cx="1055.5" cy="474.3969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1061.5" y="477.6158">float getEarnings() const</text><ellipse cx="1055.5" cy="487.5968" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="1061.5" y="490.8157">class UnavailableAppointment</text><ellipse cx="1055.5" cy="500.7967" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1061.5" y="504.0156">class NonexistentService</text><ellipse cx="1055.5" cy="513.9966" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1061.5" y="517.2155">class ExistentService</text><ellipse cx="1055.5" cy="527.1965" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1061.5" y="530.4154">class NonexistentCollab</text><ellipse cx="1055.5" cy="540.3964" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1061.5" y="543.6153">class AssignedCollab</text><ellipse cx="1055.5" cy="553.5963" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="1061.5" y="556.8152">class NonexistentClient</text><ellipse cx="1055.5" cy="566.7962" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1061.5" y="570.0151">class ExistentClient</text><ellipse cx="1055.5" cy="579.9961" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1061.5" y="583.215">class NonexistentUsername</text><ellipse cx="1055.5" cy="593.196" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1061.5" y="596.4149">class UnableToWriteFile</text><ellipse cx="1055.5" cy="606.3959" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="1061.5" y="609.6148">void writeCollabsInfo()</text><ellipse cx="1055.5" cy="619.5958" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1061.5" y="622.8147">void writeClientsInfo()</text><ellipse cx="1055.5" cy="632.7957" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1061.5" y="636.0146">void writeServicesInfo()</text><ellipse cx="1055.5" cy="645.9956" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1061.5" y="649.2145">void writeInterventionsInfo()</text><ellipse cx="1055.5" cy="659.1955" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="1061.5" y="662.4144">void writeFinancialInfo() const</text><ellipse cx="1055.5" cy="672.3954" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="517" x="1061.5" y="675.6143">void addAvailablePaintService(const std::string &amp;name, bool pro, float basePrice, const Duration &amp;duration)</text><!--MD5=[91506c20fa69d22eac57944020c826c2]
class Intervention--><rect codeLine="124" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="345.5977" id="Intervention" style="stroke: #AAAAAA; stroke-width: 1.5;" width="750" x="286" y="757"/><ellipse cx="629" cy="770" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M632.5,768.75 C632.4375,768.1094 632.2969,767.7031 631.9531,767.2656 C631.3438,766.4531 630.3438,766 629.1563,766 C626.8906,766 625.4688,767.6094 625.4688,770.0156 C625.4688,772.4219 626.875,774 629.1094,774 C631.1094,774 632.4219,772.8594 632.5313,771.125 L630.9219,771.125 C630.8125,772.0781 630.1719,772.625 629.1563,772.625 C627.875,772.625 627.125,771.6563 627.125,770.0313 C627.125,768.3906 627.9063,767.4219 629.2031,767.4219 C630.1563,767.4219 630.7031,767.8438 630.9219,768.75 L632.5,768.75 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="645" y="773.619">Intervention</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="287" x2="1035" y1="783" y2="783"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="294" y="791"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="303" y="797.2189">std::string _clientId</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="294" y="804.1999"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="303" y="810.4188">std::string _collabId</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="294" y="817.3998"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="303" y="823.6187">Date _startingTime</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="294" y="830.5997"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="303" y="836.8186">Service* _type</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="294" y="843.7996"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="303" y="850.0185">bool forcePro</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="294" y="856.9995"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="303" y="863.2184">processState _state</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="294" y="870.1994"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="303" y="876.4183">float _cost</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="287" x2="1035" y1="883.3993" y2="883.3993"/><ellipse cx="297" cy="894.3993" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="727" x="303" y="897.6182">Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)</text><ellipse cx="297" cy="907.5992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="303" y="910.8181">~Intervention()</text><ellipse cx="297" cy="920.7991" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="303" y="924.018">Date getStartingTime() const</text><ellipse cx="297" cy="933.999" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="303" y="937.2179">Service * getService() const</text><ellipse cx="297" cy="947.1989" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="303" y="950.4178">bool getForcePro() const</text><ellipse cx="297" cy="960.3988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="303" y="963.6177">std::string getCollabId() const</text><ellipse cx="297" cy="973.5987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="303" y="976.8176">std::string getClientId() const</text><ellipse cx="297" cy="986.7986" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="303" y="990.0175">void setCollabId(const std::string &amp;collabId)</text><ellipse cx="297" cy="999.9985" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="303" y="1003.2174">void setClientId(const std::string &amp;clientId)</text><ellipse cx="297" cy="1013.1984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="303" y="1016.4173">processState getProcessState()</text><ellipse cx="297" cy="1026.3983" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="303" y="1029.6173">void setProcessState(processState state)</text><ellipse cx="297" cy="1039.5982" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="303" y="1042.8172">bool conflictsWith(const Date &amp;start, const Duration &amp;duration) const</text><ellipse cx="297" cy="1052.7981" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="303" y="1056.0171">void calculateCost()</text><ellipse cx="297" cy="1065.998" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="303" y="1069.217">float getCost() const</text><ellipse cx="297" cy="1079.1979" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="303" y="1082.4169">Date getEndTime() const</text><ellipse cx="297" cy="1092.3978" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="303" y="1095.6168">bool isActive() const</text><!--MD5=[3ada0b1ccda01f6af47785107eed7eb1]
class Individual--><rect codeLine="151" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="162.4491" id="Individual" style="stroke: #AAAAAA; stroke-width: 1.5;" width="442" x="1839" y="264"/><ellipse cx="2034" cy="277" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M2037.5,275.75 C2037.4375,275.1094 2037.2969,274.7031 2036.9531,274.2656 C2036.3438,273.4531 2035.3438,273 2034.1563,273 C2031.8906,273 2030.4688,274.6094 2030.4688,277.0156 C2030.4688,279.4219 2031.875,281 2034.1094,281 C2036.1094,281 2037.4219,279.8594 2037.5313,278.125 L2035.9219,278.125 C2035.8125,279.0781 2035.1719,279.625 2034.1563,279.625 C2032.875,279.625 2032.125,278.6563 2032.125,277.0313 C2032.125,275.3906 2032.9063,274.4219 2034.2031,274.4219 C2035.1563,274.4219 2035.7031,274.8438 2035.9219,275.75 L2037.5,275.75 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="2050" y="280.619">Individual</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="1840" x2="2280" y1="290" y2="290"/><polygon fill="none" points="1850,296,1854,300,1850,304,1846,300" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1856" y="304.2189">std::string _displayName</text><polygon fill="none" points="1850,309.1999,1854,313.1999,1850,317.1999,1846,313.1999" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="1856" y="317.4188">unsigned int _id</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="1840" x2="2280" y1="324.3998" y2="324.3998"/><ellipse cx="1850" cy="335.3998" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="1856" y="338.6187">Individual()</text><ellipse cx="1850" cy="348.5997" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1856" y="351.8186">explicit Individual(std::string name)</text><ellipse cx="1850" cy="361.7996" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="113" x="1856" y="366.8995">std::string getId() const</text><ellipse cx="1850" cy="376.6495" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="1856" y="379.8684">void changeUsername(HouseMaster &amp;hm, std::string newUsername)</text><ellipse cx="1850" cy="389.8494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="1856" y="393.0683">std::vector&lt;Intervention*&gt;getAssociatedInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1850" cy="403.0493" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="419" x="1856" y="406.2682">std::vector&lt;Intervention*&gt; getAssociatedActiveInterventions(HouseMaster &amp;hm) const</text><ellipse cx="1850" cy="416.2492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1856" y="419.4681">std::string getName() const</text><!--MD5=[f483d6e5de34a60207b28a5563be5e8b]
class Collaborator--><rect codeLine="164" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="373.6475" id="Collaborator" style="stroke: #AAAAAA; stroke-width: 1.5;" width="585" x="1790.5" y="743"/><ellipse cx="2050" cy="756" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M2053.5,754.75 C2053.4375,754.1094 2053.2969,753.7031 2052.9531,753.2656 C2052.3438,752.4531 2051.3438,752 2050.1563,752 C2047.8906,752 2046.4688,753.6094 2046.4688,756.0156 C2046.4688,758.4219 2047.875,760 2050.1094,760 C2052.1094,760 2053.4219,758.8594 2053.5313,757.125 L2051.9219,757.125 C2051.8125,758.0781 2051.1719,758.625 2050.1563,758.625 C2048.875,758.625 2048.125,757.6563 2048.125,756.0313 C2048.125,754.3906 2048.9063,753.4219 2050.2031,753.4219 C2051.1563,753.4219 2051.7031,753.8438 2051.9219,754.75 L2053.5,754.75 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2066" y="759.619">Collaborator</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="1791.5" x2="2374.5" y1="769" y2="769"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1798.5" y="777"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="1807.5" y="783.2189">std::vector&lt;Classification&gt; _classifications</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1798.5" y="790.1999"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1807.5" y="796.4188">std::vector&lt;std::string&gt; _services</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1798.5" y="803.3998"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1807.5" y="809.6187">Classification _score</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1798.5" y="816.5997"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="1807.5" y="822.8186">bool _pro</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1798.5" y="829.7996"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1807.5" y="836.0185">float _earnings</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="1791.5" x2="2374.5" y1="842.9995" y2="842.9995"/><ellipse cx="1801.5" cy="853.9995" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="562" x="1807.5" y="857.2184">Collaborator(std::vector&lt;std::string&gt; services, const std::string &amp;name, bool pro, float earnings, Classification score)</text><ellipse cx="1801.5" cy="867.1994" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="1807.5" y="870.4183">~Collaborator() override</text><ellipse cx="1801.5" cy="880.3993" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="1807.5" y="883.6182">std::vector&lt;std::string&gt; getServices()</text><ellipse cx="1801.5" cy="893.5992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="1807.5" y="896.8181">bool isPro() const</text><ellipse cx="1801.5" cy="906.7991" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="1807.5" y="910.018">bool canPreform(const std::string &amp;service)</text><ellipse cx="1801.5" cy="919.999" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="447" x="1807.5" y="923.2179">bool isAvailable(HouseMaster &amp;hm, const std::string &amp;collabId, Date start, Duration duration)</text><ellipse cx="1801.5" cy="933.1989" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="1807.5" y="936.4178">bool hasQualificationToPreform(Intervention *intervention) const</text><ellipse cx="1801.5" cy="946.3988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="1807.5" y="949.6177">bool canDo(HouseMaster &amp;hm, const std::string &amp;collabId, Intervention *intervention)</text><ellipse cx="1801.5" cy="959.5987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="1807.5" y="962.8176">int getScore() const</text><ellipse cx="1801.5" cy="972.7986" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="1807.5" y="976.0175">void addClassification(Classification classification)</text><ellipse cx="1801.5" cy="985.9985" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1807.5" y="989.2174">void addService(Service* service)</text><ellipse cx="1801.5" cy="999.1984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="292" x="1807.5" y="1002.4173">void markInterventionAsComplete(Intervention *intervention)</text><ellipse cx="1801.5" cy="1012.3983" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="1807.5" y="1015.6173">void updateScore()</text><ellipse cx="1801.5" cy="1025.5982" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="1807.5" y="1028.8172">void calculateEarnings(float &amp;hmEarnings)</text><ellipse cx="1801.5" cy="1038.7981" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1807.5" y="1042.0171">float getEarnings() const</text><ellipse cx="1801.5" cy="1051.998" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="1807.5" y="1055.217">float commissionByScore()</text><ellipse cx="1801.5" cy="1065.1979" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="110" x="1807.5" y="1068.4169">unsigned int _idSeqCol</text><ellipse cx="1801.5" cy="1078.3978" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="156" x="1807.5" y="1083.4977">std::string getId() const override</text><ellipse cx="1801.5" cy="1093.2477" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="1807.5" y="1096.4666">bool operator==(const Collaborator &amp;ind2) const</text><ellipse cx="1801.5" cy="1106.4476" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="1807.5" y="1109.6665">bool operator&lt;(const Collaborator &amp;col2) const</text><!--MD5=[ed6624c6556d5e7b1bd23032162d20b7]
class Client--><rect codeLine="193" fill="#CCCCCC" filter="url(#fljts5cfpb90d)" height="202.0488" id="Client" style="stroke: #AAAAAA; stroke-width: 1.5;" width="684" x="1071" y="829"/><ellipse cx="1396" cy="842" fill="#FF8800" rx="8" ry="8" style="stroke: #AAAAAA; stroke-width: 1.0;"/><path d="M1399.5,840.75 C1399.4375,840.1094 1399.2969,839.7031 1398.9531,839.2656 C1398.3438,838.4531 1397.3438,838 1396.1563,838 C1393.8906,838 1392.4688,839.6094 1392.4688,842.0156 C1392.4688,844.4219 1393.875,846 1396.1094,846 C1398.1094,846 1399.4219,844.8594 1399.5313,843.125 L1397.9219,843.125 C1397.8125,844.0781 1397.1719,844.625 1396.1563,844.625 C1394.875,844.625 1394.125,843.6563 1394.125,842.0313 C1394.125,840.3906 1394.9063,839.4219 1396.2031,839.4219 C1397.1563,839.4219 1397.7031,839.8438 1397.9219,840.75 L1399.5,840.75 Z "/><text fill="#000000" font-family="Verdana" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="27" x="1412" y="845.619">Client</text><line style="stroke: #AAAAAA; stroke-width: 1.5;" x1="1072" x2="1754" y1="855" y2="855"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1079" y="863"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="1088" y="869.2189">unsigned int _nif</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1079" y="876.1999"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1088" y="882.4188">bool _premium</text><line style="stroke: #AAAAAA; stroke-width: 1.0;" x1="1072" x2="1754" y1="889.3998" y2="889.3998"/><ellipse cx="1082" cy="900.3998" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="107" x="1088" y="903.6187">unsigned int _idSeqClt</text><ellipse cx="1082" cy="913.5997" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="1088" y="916.8186">Client(unsigned int nif, const std::string &amp;name, bool premium)</text><ellipse cx="1082" cy="926.7996" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="1088" y="930.0185">~Client() override = default</text><ellipse cx="1082" cy="939.9995" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="1088" y="943.2184">unsigned int getNif()</text><ellipse cx="1082" cy="953.1994" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1088" y="956.4183">bool isPremium() const</text><ellipse cx="1082" cy="966.3993" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="156" x="1088" y="971.4992">std::string getId() const override</text><ellipse cx="1082" cy="981.2492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="661" x="1088" y="984.4681">void requestIntervention(HouseMaster &amp;hm, const Date &amp;date, const std::string &amp;service, bool forcePro, unsigned int nrOfRooms) const</text><ellipse cx="1082" cy="994.4491" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="240" x="1088" y="997.668">void cancelIntervention(Intervention *intervention)</text><ellipse cx="1082" cy="1007.649" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="484" x="1088" y="1010.8679">void classifyCollaborator(HouseMaster &amp;hm, const std::string &amp;collabId, Classification classification)</text><ellipse cx="1082" cy="1020.8489" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#333333" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1088" y="1024.0678">bool operator==(const Client &amp;ind2) const</text><!--MD5=[8d1d930e92d69d0f63c31789944ca4f0]
reverse link Individual to Collaborator--><path codeLine="210" d="M2063.96,446.28 C2067.16,527.58 2071.77,644.39 2075.65,742.75 " fill="none" id="Individual-backto-Collaborator" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="2056.96,446.41,2063.16,426.15,2070.94,445.85,2056.96,446.41" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[f2f702391b19b694c366b89ff259a1c9]
reverse link Individual to Client--><path codeLine="211" d="M1998.3,442.93 C1949.72,514.52 1877.32,611.54 1799,683 C1738.83,737.9 1664.96,788.27 1598.01,828.94 " fill="none" id="Individual-backto-Client" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1992.55,438.93,2009.51,426.23,2004.18,446.73,1992.55,438.93" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[ce8c4d4cdc325bde0e310b60a9d635c9]
reverse link Date to Duration--><path codeLine="212" d="M364.24,1450.27 C374,1465.21 383.5,1479.75 392.15,1492.99 " fill="none" id="Date-backto-Duration" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="358.21,1453.84,353.14,1433.27,369.93,1446.19,358.21,1453.84" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[9b596b60bea1e93eaea4273809ede9f7]
reverse link Service to Painting--><path codeLine="213" d="M961,1419.81 C961,1453.25 961,1487.69 961,1513.3 " fill="none" id="Service-backto-Painting" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="954,1419.76,961,1399.76,968,1419.76,954,1419.76" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[f7376124c70693f07b59c98ff50cd4a4]
reverse link HouseMaster to Client--><path codeLine="214" d="M1413,696.04 C1413,744.4 1413,790.53 1413,828.78 " fill="none" id="HouseMaster-backto-Client" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1413,683.02,1409,689.02,1413,695.02,1417,689.02,1413,683.02" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[695a4985b4a856d73a05f6bd0c943d0c]
reverse link HouseMaster to Collaborator--><path codeLine="215" d="M1791.91,675.71 C1818.22,698.6 1844.16,721.17 1869.07,742.85 " fill="none" id="HouseMaster-backto-Collaborator" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1781.81,666.92,1783.7102,673.8762,1790.8621,674.7977,1788.962,667.8415,1781.81,666.92" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[7d871f9c8add411a0ead6405517479ed]
reverse link HouseMaster to Intervention--><path codeLine="216" d="M1034.09,639.75 C982.39,679.84 930.76,719.87 883.11,756.8 " fill="none" id="HouseMaster-backto-Intervention" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="1044.44,631.74,1037.2476,632.2586,1034.96,639.0972,1042.1524,638.5786,1044.44,631.74" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[d193e677350051aed924e61da77287e0]
reverse link Collaborator to classification--><path codeLine="217" d="M2083,1130.38 C2083,1169.12 2083,1207.11 2083,1237.63 " fill="none" id="Collaborator-backto-classification" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="2083,1117.23,2079,1123.23,2083,1129.23,2087,1123.23,2083,1117.23" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[5e74255e6548edae4a1e429487e00874]
reverse link Intervention to Service--><path codeLine="218" d="M807.74,1113.45 C834.75,1147.03 861.9,1180.79 885.69,1210.37 " fill="none" id="Intervention-backto-Service" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="799.36,1103.03,800.0081,1110.2119,806.8868,1112.3759,806.2387,1105.194,799.36,1103.03" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[abc7dc0627f78551ca2688d2e53e79d6]
reverse link Intervention to processState--><path codeLine="219" d="M636.69,1116.06 C629.36,1171.86 622.01,1227.83 617.26,1263.99 " fill="none" id="Intervention-backto-processState" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="638.4,1103.03,633.6496,1108.4553,636.8305,1114.9269,641.5809,1109.5016,638.4,1103.03" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[403a0b419d4ed172655f60d4279e60e9]
reverse link Intervention to Date--><path codeLine="220" d="M471.19,1112.07 C448.26,1133.95 425.22,1155.92 403.34,1176.8 " fill="none" id="Intervention-backto-Date" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="480.66,1103.03,473.5569,1104.2735,471.9729,1111.3085,479.0759,1110.065,480.66,1103.03" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[e25c82b72ac52000f19042cdb983f1ae]
reverse link Intervention to Duration--><path codeLine="221" d="M712.96,1115.95 C730.35,1216.79 732.77,1339.7 675,1433 C650.5,1472.57 608.74,1499.61 566.69,1517.91 " fill="none" id="Intervention-backto-Duration" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="#000000" points="710.65,1103.13,707.7755,1109.7434,712.7746,1114.9404,715.6491,1108.327,710.65,1103.13" style="stroke: #000000; stroke-width: 1.0;"/><!--MD5=[60ad9e89b395be7e0d0d36ab2198ba36]
@startuml
!define LIGHTORANGE
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void usernameMapChanger(std::string id, std::string newUsername)
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + void changeUsername(HouseMaster &hm, std::string newUsername)
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(Service* service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 Date <|- - Duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - Date
 Intervention *- - Duration
@enduml

@startuml










skinparam stereotypeCBackgroundColor FF8800

skinparam backgroundColor fff








skinparam circledCharacter {
  radius 8
  fontSize 11
  fontName Verdana
}

skinparam class {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  attributeFontColor 333
  attributeFontSize 11
  attributeIconSize 11
}


skinparam actor {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam participant {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam collections {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam SequenceBox{
    backgroundColor e0e0e0
  borderColor cccccc
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam interface {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam component {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam node {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam database {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam queue {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam usecase {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam activity {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam sequence {
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11

  lifeLineBorderColor FF8800
  lifeLineBackgroundColor e0e0e0
}

skinparam boundary {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam control {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam entity {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


skinparam state {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
  startColor FF8800
  endColor BB6600
}


skinparam object {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}


skinparam note {
    backgroundColor FF8800
  borderColor BB6600
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam cloud {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
    arrowColor 000
  arrowFontName Verdana
  arrowFontColor 333
  arrowFontSize 11
}

skinparam rectangle {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}

skinparam storage {
    backgroundColor ccc
  borderColor aaa
    fontColor 000
  fontName Verdana
  fontSize 11
  stereotypeFontColor 333
  stereotypeFontSize 11
}


 enum processState{
    Active,
    Complete,
    Canceled
 }


 enum classification{
     unreliable = -2
     clumsy = -1
     newHere = 0
     getsItDone = 1
     hardWorking = 2
     attentive = 3
     savior = 4
 }

 class Date{
     - unsigned int _day{};
     - unsigned int _month{};
     - unsigned int _year{};
     # unsigned int _hours
     # unsigned int _minutes
     - -
     + Date();
     + Date(unsigned int day, unsigned int month, unsigned int year, unsigned int hours, unsigned int minutes);
     + explicit Date(const std::string &date);
     + {abstract} std::string getString() const;
     + Date operator+(const Date &d1) const;
     + bool operator==(const Date &d2) const;
     + bool operator<(const Date &d2) const;
     + bool operator>(const Date &d2) const;
     + {abstract} void checkIfValid() const;
     - bool isLeapYear() const;
     + class InvalidDate;
 }

 class Duration{
     + Duration();
     + Duration(unsigned int hours, unsigned int minutes);
     + explicit Duration(const std::string &duration);
     + {abstract} std::string getString() const override;
     + {abstract} void checkIfValid() const override;
     + class InvalidDuration;
 }

 class Service{
    - std::string _name
    - bool _pro
    - float _basePrice
    - duration _duration
    - -
    + Service()
    + Service(std::string name, bool pro, float basePrice, const duration &duration)
    + std::string getName() const
    + bool getPro() const
    + float getBasePrice() const
    + duration getDuration() const
    + {abstract} float getPrice()
 }

 class Painting{
    - unsigned int _roomNumber
    - -
    + Painting(std::string name, bool pro, float basePrice, const duration &duration)
    + {abstract} float getPrice() override
 }

 class HouseMaster{
    std::unordered_map<std::string, Service *> _availableServices
    std::map<std::string, Client *> _clients
    std::unordered_map<std::string, std::string> _usernameMap
    std::map<std::string, Collaborator *> _collaborators
    std::unordered_set<Intervention *> _interventions
    float _earnings
    - -
    + HouseMaster()
    + HouseMaster(std::ifstream collaborators, std::ifstream clients, std::ifstream services, std::ifstream earnings, std::ifstream history)
    + ~HouseMaster() = default
    + std::map<std::string, Collaborator *> &getCollaborators()
    + std::map<std::string, Client *> &getClients()
    + std::unordered_set<Intervention *> & getInterventions()
    + void addAvailableService(const std::string &name, bool pro, float basePrice, const Duration &duration)
    + void removeAvailableService(const std::string &service)
    + std::unordered_map<std::string, Service *> &getAvailableServices()
    + void usernameMapChanger(std::string id, std::string newUsername)
    + void removeCollaborator(const std::string &collId)
    + void addCollaborator(const std::vector<std::string> &services, const std::string &name, bool pro, float earnings = 0, Classification score = newHere)
    + void addClient(unsigned long nif, const std::string &name, bool premium)
    + void removeClient(const std::string &clientId)
    + Intervention * addIntervention(const Date &start, const std::string &service, bool forcePro, const std::string &clientId, unsigned int nrOfRooms = 0)
    + {static} void changeInterventionState(Intervention *intervention, processState state)
    + void processTransaction(Intervention *intervention)
    + std::vector<Intervention *> getAssociatedInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedActiveInterventions(const std::string &id)
    + std::vector<Intervention *> getAssociatedPastInterventions(const std::string &id)
    + std::vector<Intervention *> getAllPastInterventions()
    + std::vector<Intervention *> getAllActiveInterventions()
    + void assignCollaborator(Intervention *intervention, const std::vector<std::pair<std::string, Collaborator *>> &orderedCollabs)
    + std::vector<std::pair<std::string, Collaborator *>> sortCollaboratorsByScore()
    + Individual *findByUsername(const std::string &name)
    + {static} void markAsComplete(Intervention *intervention)
    + float getEarnings() const
    + class UnavailableAppointment
    + class NonexistentService
    + class ExistentService
    + class NonexistentCollab
    + class AssignedCollab
    + class NonexistentClient
    + class ExistentClient
    + class NonexistentUsername
    + class UnableToWriteFile
    + void writeCollabsInfo()
    + void writeClientsInfo()
    + void writeServicesInfo()
    + void writeInterventionsInfo()
    + void writeFinancialInfo() const
    + void addAvailablePaintService(const std::string &name, bool pro, float basePrice, const Duration &duration)
 }

 class Intervention{
    - std::string _clientId
    - std::string _collabId
    - Date _startingTime
    - Service* _type
    - bool forcePro
    - processState _state
    - float _cost
    - -
    + Intervention(Date start, Service *service, bool forcePro, unsigned int nrOfRooms, processState state, float cost, std::string collabId, std::string clientId)
    + ~Intervention()
    + Date getStartingTime() const
    + Service * getService() const
    + bool getForcePro() const
    + std::string getCollabId() const
    + std::string getClientId() const
    + void setCollabId(const std::string &collabId)
    + void setClientId(const std::string &clientId)
    + processState getProcessState()
    + void setProcessState(processState state)
    + bool conflictsWith(const Date &start, const Duration &duration) const
    + void calculateCost()
    + float getCost() const
    + Date getEndTime() const
    + bool isActive() const
 }

 class Individual{
    # std::string _displayName
    # unsigned int _id
    - -
    + Individual()
    + explicit Individual(std::string name)
    + {abstract}std::string getId() const
    + void changeUsername(HouseMaster &hm, std::string newUsername)
    + std::vector<Intervention*>getAssociatedInterventions(HouseMaster &hm) const
    + std::vector<Intervention*> getAssociatedActiveInterventions(HouseMaster &hm) const
    + std::string getName() const
 }

 class Collaborator{
    - std::vector<Classification> _classifications
    - std::vector<std::string> _services
    - Classification _score
    - bool _pro
    - float _earnings
    - -
    + Collaborator(std::vector<std::string> services, const std::string &name, bool pro, float earnings, Classification score)
    + ~Collaborator() override
    + std::vector<std::string> getServices()
    + bool isPro() const
    + bool canPreform(const std::string &service)
    + {static} bool isAvailable(HouseMaster &hm, const std::string &collabId, Date start, Duration duration)
    + bool hasQualificationToPreform(Intervention *intervention) const
    + bool canDo(HouseMaster &hm, const std::string &collabId, Intervention *intervention)
    + int getScore() const
    + void addClassification(Classification classification)
    + void addService(Service* service)
    + {static} void markInterventionAsComplete(Intervention *intervention)
    + void updateScore()
    + void calculateEarnings(float &hmEarnings)
    + float getEarnings() const
    + float commissionByScore()
    + {static} unsigned int _idSeqCol
    + {abstract} std::string getId() const override
    + bool operator==(const Collaborator &ind2) const
    + bool operator<(const Collaborator &col2) const
 }

 class Client{
    - unsigned int _nif
    - bool _premium
    - -
    + {static} unsigned int _idSeqClt
    + Client(unsigned int nif, const std::string &name, bool premium)
    + ~Client() override = default
    + unsigned int getNif()
    + bool isPremium() const
    + {abstract} std::string getId() const override
    + void requestIntervention(HouseMaster &hm, const Date &date, const std::string &service, bool forcePro, unsigned int nrOfRooms) const
    + {static} void cancelIntervention(Intervention *intervention)
    + {static} void classifyCollaborator(HouseMaster &hm, const std::string &collabId, Classification classification)
    + bool operator==(const Client &ind2) const
 }


 Individual <|- - Collaborator
 Individual <|- - Client
 Date <|- - Duration
 Service<|- - Painting
 HouseMaster o- - Client
 HouseMaster o- - Collaborator
 HouseMaster *- - Intervention
 Collaborator *- - classification
 Intervention *- - Service
 Intervention *- - processState
 Intervention o- - Date
 Intervention *- - Duration
@enduml

PlantUML version 1.2020.19(Mon Oct 12 16:10:01 WEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: pt
Country: PT
--></g></svg>